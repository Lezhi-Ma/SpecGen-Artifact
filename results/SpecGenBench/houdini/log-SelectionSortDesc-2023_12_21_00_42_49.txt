public class SelectionSortDesc {

    //@ non_null
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ non_null
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ non_null
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:3: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:63: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:162: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
3 errors

public class SelectionSortDesc {

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ non_null
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ non_null
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:62: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:161: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
2 errors

public class SelectionSortDesc {

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ non_null
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:160: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
1 error

public class SelectionSortDesc {

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:387: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:45:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:387:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:3: verify: Precondition conjunct is false: 5 < arr.length
    //@ requires 5 < arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:386: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:44:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:386:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:3: verify: Precondition conjunct is false: 5 <= arr.length
    //@ requires 5 <= arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:385: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:43:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:385:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:3: verify: Precondition conjunct is false: 5 == arr.length
    //@ requires 5 == arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:384: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:42:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:384:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:6: verify: Precondition conjunct is false: 4 < arr.length
    //@ requires 4 < arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:383: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:41:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:383:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:6: verify: Precondition conjunct is false: 4 <= arr.length
    //@ requires 4 <= arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:382: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:40:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:382:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:6: verify: Precondition conjunct is false: 4 == arr.length
    //@ requires 4 == arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:381: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:39:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:381:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:9: verify: Precondition conjunct is false: 3 < arr.length
    //@ requires 3 < arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:380: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:38:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:380:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:9: verify: Precondition conjunct is false: 3 <= arr.length
    //@ requires 3 <= arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:379: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:37:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:379:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:9: verify: Precondition conjunct is false: 3 == arr.length
    //@ requires 3 == arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:378: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:36:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:378:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:12: verify: Precondition conjunct is false: 2 < arr.length
    //@ requires 2 < arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:377: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:377:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:12: verify: Precondition conjunct is false: 2 <= arr.length
    //@ requires 2 <= arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:376: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:34:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:376:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:12: verify: Precondition conjunct is false: 2 == arr.length
    //@ requires 2 == arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:375: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:33:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:375:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:15: verify: Precondition conjunct is false: 1 < arr.length
    //@ requires 1 < arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:374: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:32:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:374:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:15: verify: Precondition conjunct is false: 1 <= arr.length
    //@ requires 1 <= arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:373: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:31:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:373:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:15: verify: Precondition conjunct is false: 1 == arr.length
    //@ requires 1 == arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:372: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:30:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:372:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:20: verify: Precondition conjunct is false: -1 == arr.length
    //@ requires -1 == arr.length;
                    ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:371: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:29:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:371:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:21: verify: Precondition conjunct is false: -1 >= arr.length
    //@ requires -1 >= arr.length;
                    ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:370: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:28:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:370:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:21: verify: Precondition conjunct is false: -1 > arr.length
    //@ requires -1 > arr.length;
                    ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:369: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:27:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:369:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:21: verify: Precondition conjunct is false: 7 < arr.length
    //@ requires 7 < arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:368: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:26:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:368:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:21: verify: Precondition conjunct is false: 7 <= arr.length
    //@ requires 7 <= arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:367: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:25:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:367:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:21: verify: Precondition conjunct is false: 7 == arr.length
    //@ requires 7 == arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:368: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:368:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:15: verify: Precondition conjunct is false: 1 != arr.length
    //@ requires 1 != arr.length;
                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:137:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:27:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:41: verify: Precondition conjunct is false: 5 < arr.length
    //@ requires 5 < arr.length;
                   ^
6 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:367: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:23:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:367:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:16: verify: Precondition conjunct is false: 1 > arr.length
    //@ requires 1 > arr.length;
                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:136:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:136: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:26:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:40: verify: Precondition conjunct is false: 5 < arr.length
    //@ requires 5 < arr.length;
                   ^
6 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 >= arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:368: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:22:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:368:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:12: verify: Precondition conjunct is false: 2 != arr.length
    //@ requires 2 != arr.length;
                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:135:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:135: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:25:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:39: verify: Precondition conjunct is false: 5 < arr.length
    //@ requires 5 < arr.length;
                   ^
6 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 >= arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:367: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:21:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:367:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:13: verify: Precondition conjunct is false: 2 > arr.length
    //@ requires 2 > arr.length;
                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:134:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:38: verify: Precondition conjunct is false: 5 < arr.length
    //@ requires 5 < arr.length;
                   ^
6 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 1 >= arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:366: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:20:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:366:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:13: verify: Precondition conjunct is false: 1 >= arr.length
    //@ requires 1 >= arr.length;
                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:133:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:23:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:37: verify: Precondition conjunct is false: 5 < arr.length
    //@ requires 5 < arr.length;
                   ^
6 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 >= arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:369: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:19:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:369:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:9: verify: Precondition conjunct is false: 3 != arr.length
    //@ requires 3 != arr.length;
                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:22: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:132:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:132: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:22:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:36: verify: Precondition conjunct is false: 5 < arr.length
    //@ requires 5 < arr.length;
                   ^
6 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 >= arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:368: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:18:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:368:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: Precondition conjunct is false: 3 > arr.length
    //@ requires 3 > arr.length;
                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:131:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:21:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: 5 < arr.length
    //@ requires 5 < arr.length;
                   ^
6 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 2 >= arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:367: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:17:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:367:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: Precondition conjunct is false: 2 >= arr.length
    //@ requires 2 >= arr.length;
                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:130:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:20:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:34: verify: Precondition conjunct is false: 5 < arr.length
    //@ requires 5 < arr.length;
                   ^
6 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 >= arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:374: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:16:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:374:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:6: verify: Precondition conjunct is false: 4 != arr.length
    //@ requires 4 != arr.length;
                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:129:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:19:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:33: verify: Precondition conjunct is false: 5 < arr.length
    //@ requires 5 < arr.length;
                   ^
6 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 >= arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:373: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:15:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:373:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:7: verify: Precondition conjunct is false: 4 > arr.length
    //@ requires 4 > arr.length;
                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:128:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:18:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:32: verify: Precondition conjunct is false: 5 < arr.length
    //@ requires 5 < arr.length;
                   ^
6 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 3 >= arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:372: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:14:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:372:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:7: verify: Precondition conjunct is false: 3 >= arr.length
    //@ requires 3 >= arr.length;
                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:127:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:17:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:31: verify: Precondition conjunct is false: 5 < arr.length
    //@ requires 5 < arr.length;
                   ^
6 verification failures

public class SelectionSortDesc {

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 >= arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:373: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:13:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:373:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:3: verify: Precondition conjunct is false: 5 != arr.length
    //@ requires 5 != arr.length;
                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:126:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:16:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:30: verify: Precondition conjunct is false: 5 < arr.length
    //@ requires 5 < arr.length;
                   ^
6 verification failures

public class SelectionSortDesc {

    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 >= arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:372: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:12:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:372:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:4: verify: Precondition conjunct is false: 5 > arr.length
    //@ requires 5 > arr.length;
                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:125:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:15:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:29: verify: Precondition conjunct is false: 5 < arr.length
    //@ requires 5 < arr.length;
                   ^
6 verification failures

public class SelectionSortDesc {

    //@ requires 5 >= arr.length;
    //@ requires 4 >= arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:371: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:11:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:371:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:4: verify: Precondition conjunct is false: 4 >= arr.length
    //@ requires 4 >= arr.length;
                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:124:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:14:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:28: verify: Precondition conjunct is false: 5 < arr.length
    //@ requires 5 < arr.length;
                   ^
6 verification failures

public class SelectionSortDesc {

    //@ requires 5 >= arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:376: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:376:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:3: verify: Precondition conjunct is false: 5 >= arr.length
    //@ requires 5 >= arr.length;
                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:123:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:13:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:27: verify: Precondition conjunct is false: 5 < arr.length
    //@ requires 5 < arr.length;
                   ^
6 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:375: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:9:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:375:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:6: verify: Precondition conjunct is false: 7 != arr.length
    //@ requires 7 != arr.length;
                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:122:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:12:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:26: verify: Precondition conjunct is false: 5 < arr.length
    //@ requires 5 < arr.length;
                   ^
6 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:374: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:8:) in method main
        selectionSort(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:374:
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:7: verify: Precondition conjunct is false: 7 > arr.length
    //@ requires 7 > arr.length;
                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:121:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:11:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:25: verify: Precondition conjunct is false: 5 < arr.length
    //@ requires 5 < arr.length;
                   ^
6 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:120:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 5 < arr.length
    //@ requires 5 < arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:119:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 5 <= arr.length
    //@ requires 5 <= arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:118:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 5 == arr.length
    //@ requires 5 == arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:117:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 5 != arr.length
    //@ requires 5 != arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:116:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 5 >= arr.length
    //@ requires 5 >= arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:115:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 5 > arr.length
    //@ requires 5 > arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:114:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 4 < arr.length
    //@ requires 4 < arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:113:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 4 <= arr.length
    //@ requires 4 <= arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:112:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 4 == arr.length
    //@ requires 4 == arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:111:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 4 != arr.length
    //@ requires 4 != arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:110:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 4 >= arr.length
    //@ requires 4 >= arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:109:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 4 > arr.length
    //@ requires 4 > arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:108:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 3 < arr.length
    //@ requires 3 < arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:107:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 3 <= arr.length
    //@ requires 3 <= arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:106:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 3 == arr.length
    //@ requires 3 == arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:105:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 3 != arr.length
    //@ requires 3 != arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:104:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 3 >= arr.length
    //@ requires 3 >= arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:103:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 3 > arr.length
    //@ requires 3 > arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:102:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 2 < arr.length
    //@ requires 2 < arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:101:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 2 <= arr.length
    //@ requires 2 <= arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:100:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 2 == arr.length
    //@ requires 2 == arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:99:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 2 != arr.length
    //@ requires 2 != arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:98:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 2 >= arr.length
    //@ requires 2 >= arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:97:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 2 > arr.length
    //@ requires 2 > arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:96:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 1 < arr.length
    //@ requires 1 < arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:95:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 1 <= arr.length
    //@ requires 1 <= arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:94:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 1 == arr.length
    //@ requires 1 == arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:93:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 1 != arr.length
    //@ requires 1 != arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:92:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 1 >= arr.length
    //@ requires 1 >= arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:91:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: verify: Precondition conjunct is false: 1 > arr.length
    //@ requires 1 > arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:90:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:26: verify: Precondition conjunct is false: -1 == arr.length
    //@ requires -1 == arr.length;
                    ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:89:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:27: verify: Precondition conjunct is false: -1 >= arr.length
    //@ requires -1 >= arr.length;
                    ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:88:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:27: verify: Precondition conjunct is false: -1 > arr.length
    //@ requires -1 > arr.length;
                    ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:87:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:27: verify: Precondition conjunct is false: 7 < arr.length
    //@ requires 7 < arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:86:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:27: verify: Precondition conjunct is false: 7 <= arr.length
    //@ requires 7 <= arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:85:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:27: verify: Precondition conjunct is false: 7 == arr.length
    //@ requires 7 == arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:84:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:27: verify: Precondition conjunct is false: 7 != arr.length
    //@ requires 7 != arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:83:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:28: verify: Precondition conjunct is false: 7 > arr.length
    //@ requires 7 > arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:82:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:28: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:81:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:28: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:80:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:28: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:79:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:28: verify: Precondition conjunct is false: i != -1
    //@ requires i != -1;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:78:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:28: verify: Precondition conjunct is false: i >= -1
    //@ requires i >= -1;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:77:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:28: verify: Precondition conjunct is false: i > -1
    //@ requires i > -1;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:76:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:30: verify: Precondition conjunct is false: i == arr.length
    //@ requires i == arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:75:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:31: verify: Precondition conjunct is false: i >= arr.length
    //@ requires i >= arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:74:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:31: verify: Precondition conjunct is false: i > arr.length
    //@ requires i > arr.length;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:73:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:33: verify: Precondition conjunct is false: i == 7
    //@ requires i == 7;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:72:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:34: verify: Precondition conjunct is false: i >= 7
    //@ requires i >= 7;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:71:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:34: verify: Precondition conjunct is false: i > 7
    //@ requires i > 7;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:70:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:34: verify: Precondition conjunct is false: i < 5
    //@ requires i < 5;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:69:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i == 5
    //@ requires i == 5;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:68:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i != 5
    //@ requires i != 5;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:67:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i >= 5
    //@ requires i >= 5;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:66:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i > 5
    //@ requires i > 5;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:65:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i < 4
    //@ requires i < 4;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:64:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i <= 4
    //@ requires i <= 4;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:63:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i == 4
    //@ requires i == 4;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:62:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i != 4
    //@ requires i != 4;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:61:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i >= 4
    //@ requires i >= 4;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:60:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i > 4
    //@ requires i > 4;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:59:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i < 3
    //@ requires i < 3;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:58:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i <= 3
    //@ requires i <= 3;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:57:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i == 3
    //@ requires i == 3;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:56:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i != 3
    //@ requires i != 3;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:55:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i >= 3
    //@ requires i >= 3;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:54:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i > 3
    //@ requires i > 3;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:53:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i < 2
    //@ requires i < 2;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:52:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i <= 2
    //@ requires i <= 2;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:51:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i == 2
    //@ requires i == 2;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:50:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i != 2
    //@ requires i != 2;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:49:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i >= 2
    //@ requires i >= 2;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:48:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i > 2
    //@ requires i > 2;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:47:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:46:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:45:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:44:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:43:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:42:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:41:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:40:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:39:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:38:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:37:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i >= 0
    //@ requires i >= 0;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:36:) in method selectionSort
            __Loop_Invariant_Dummy1(arr, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:10:
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:35: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
3 verification failures

public class SelectionSortDesc {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            __Loop_Invariant_Dummy1(arr, i);
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                __Loop_Invariant_Dummy2(arr, i, index, j);
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i != arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i != 7;
    //@ requires i <= 5;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires index < i;
    //@ requires index <= i;
    //@ requires index == i;
    //@ requires index != i;
    //@ requires index >= i;
    //@ requires index > i;
    //@ requires index < arr.length;
    //@ requires index <= arr.length;
    //@ requires index == arr.length;
    //@ requires index != arr.length;
    //@ requires index >= arr.length;
    //@ requires index > arr.length;
    //@ requires index < 7;
    //@ requires index <= 7;
    //@ requires index == 7;
    //@ requires index != 7;
    //@ requires index >= 7;
    //@ requires index > 7;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < index;
    //@ requires j <= index;
    //@ requires j == index;
    //@ requires j != index;
    //@ requires j >= index;
    //@ requires j > index;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int index, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        selectionSort(arr);
        arr = new int[]{1};
        selectionSort(arr);
        arr = new int[]{1, -2};
        selectionSort(arr);
        arr = new int[]{1, 1};
        selectionSort(arr);
        arr = new int[]{1, 2, -7};
        selectionSort(arr);
        arr = new int[]{1, 1, 2};
        selectionSort(arr);
        arr = new int[]{7, 1, 3};
        selectionSort(arr);
        arr = new int[]{7, 3, 1};
        selectionSort(arr);
        arr = new int[]{-8, 1, 0, 1};
        selectionSort(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        selectionSort(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        selectionSort(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        selectionSort(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:18: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method selectionSort
            int smallerNumber = arr[index];   
                                   ^
1 verification failure

