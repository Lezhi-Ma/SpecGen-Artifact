class CompareArray {

    //@ non_null
    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ non_null
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ non_null
    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ non_null
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:3: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:40: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:108: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:145: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
4 errors

class CompareArray {

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ non_null
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ non_null
    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ non_null
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:39: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:107: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:144: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
3 errors

class CompareArray {

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ non_null
    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ non_null
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:106: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:143: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
2 errors

class CompareArray {

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ non_null
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:142: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
1 error

class CompareArray {

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:244: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:91:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:244:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:3: verify: Precondition conjunct is false: 6 < a.length
    //@ requires 6 < a.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:243: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:90:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:243:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:3: verify: Precondition conjunct is false: 6 <= a.length
    //@ requires 6 <= a.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:242: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:89:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:242:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:3: verify: Precondition conjunct is false: 6 == a.length
    //@ requires 6 == a.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:241: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:88:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:241:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:6: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:240: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:87:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:240:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:8: verify: Precondition conjunct is false: 5 != a.length
    //@ requires 5 != a.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:239: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:86:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:239:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:9: verify: Precondition conjunct is false: 5 > a.length
    //@ requires 5 > a.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:238: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:85:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:238:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:11: verify: Precondition conjunct is false: 2 == a.length
    //@ requires 2 == a.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:237: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:84:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:237:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:12: verify: Precondition conjunct is false: 2 >= a.length
    //@ requires 2 >= a.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:236: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:83:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:236:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:12: verify: Precondition conjunct is false: 2 > a.length
    //@ requires 2 > a.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:235: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:82:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:235:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:14: verify: Precondition conjunct is false: 1 == a.length
    //@ requires 1 == a.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:234: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:81:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:234:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:15: verify: Precondition conjunct is false: 1 >= a.length
    //@ requires 1 >= a.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:233: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:80:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:233:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:15: verify: Precondition conjunct is false: 1 > a.length
    //@ requires 1 > a.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:232: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:79:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:232:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:17: verify: Precondition conjunct is false: -1 == a.length
    //@ requires -1 == a.length;
                    ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:231: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:78:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:231:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:18: verify: Precondition conjunct is false: -1 >= a.length
    //@ requires -1 >= a.length;
                    ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:230: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:77:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:230:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:18: verify: Precondition conjunct is false: -1 > a.length
    //@ requires -1 > a.length;
                    ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:229: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:76:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:229:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:18: verify: Precondition conjunct is false: 9 < a.length
    //@ requires 9 < a.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:228: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:75:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:228:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:18: verify: Precondition conjunct is false: 9 <= a.length
    //@ requires 9 <= a.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:227: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:74:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:227:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:18: verify: Precondition conjunct is false: 9 == a.length
    //@ requires 9 == a.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:226: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:73:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:226:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:21: verify: Precondition conjunct is false: 6 < b.length
    //@ requires 6 < b.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:225: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:72:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:225:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:21: verify: Precondition conjunct is false: 6 <= b.length
    //@ requires 6 <= b.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:224: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:71:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:224:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:21: verify: Precondition conjunct is false: 6 == b.length
    //@ requires 6 == b.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:223: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:70:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:223:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:24: verify: Precondition conjunct is false: a.length < b.length
    //@ requires a.length < b.length;
                          ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:222: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:69:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:222:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:26: verify: Precondition conjunct is false: a.length != b.length
    //@ requires a.length != b.length;
                          ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:221: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:68:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:221:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:27: verify: Precondition conjunct is false: a.length > b.length
    //@ requires a.length > b.length;
                          ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:220: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:67:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:220:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:27: verify: Precondition conjunct is false: 5 < b.length
    //@ requires 5 < b.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:219: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:66:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:219:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:29: verify: Precondition conjunct is false: 5 != b.length
    //@ requires 5 != b.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:218: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:65:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:218:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:30: verify: Precondition conjunct is false: 5 > b.length
    //@ requires 5 > b.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:217: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:64:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:217:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:32: verify: Precondition conjunct is false: 2 == b.length
    //@ requires 2 == b.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:216: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:63:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:216:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:33: verify: Precondition conjunct is false: 2 >= b.length
    //@ requires 2 >= b.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:215: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:62:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:215:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:33: verify: Precondition conjunct is false: 2 > b.length
    //@ requires 2 > b.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:214: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:61:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:214:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:35: verify: Precondition conjunct is false: 1 == b.length
    //@ requires 1 == b.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:213: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:60:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:213:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:36: verify: Precondition conjunct is false: 1 >= b.length
    //@ requires 1 >= b.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:59:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:212:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:36: verify: Precondition conjunct is false: 1 > b.length
    //@ requires 1 > b.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:211: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:58:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:211:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:38: verify: Precondition conjunct is false: -1 == b.length
    //@ requires -1 == b.length;
                    ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:210: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:57:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:210:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:39: verify: Precondition conjunct is false: -1 >= b.length
    //@ requires -1 >= b.length;
                    ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:209: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:56:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:209:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:39: verify: Precondition conjunct is false: -1 > b.length
    //@ requires -1 > b.length;
                    ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:208: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:55:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:208:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:39: verify: Precondition conjunct is false: 9 < b.length
    //@ requires 9 < b.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:207: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:54:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:207:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:39: verify: Precondition conjunct is false: 9 <= b.length
    //@ requires 9 <= b.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:206: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:53:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:206:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:39: verify: Precondition conjunct is false: 9 == b.length
    //@ requires 9 == b.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:58: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:199:) in method arrcmp
            __Loop_Invariant_Dummy1(a, b, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:199: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:58:
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:67: verify: Precondition conjunct is false: 6 < a.length
    //@ requires 6 < a.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:64: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:43:) in method arrcmp
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:64:
    //@ ensures !\result;
        ^
2 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures a != null ==> !\result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:63: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:46:) in method arrcmp
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:63:
    //@ ensures a != null ==> !\result;
        ^
2 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:56: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:196:) in method arrcmp
            __Loop_Invariant_Dummy1(a, b, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:196: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:56:
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:65: verify: Precondition conjunct is false: 6 <= a.length
    //@ requires 6 <= a.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:56: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:195:) in method arrcmp
            __Loop_Invariant_Dummy1(a, b, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:195: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:56:
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:65: verify: Precondition conjunct is false: 6 == a.length
    //@ requires 6 == a.length;
                   ^
3 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    //@ ensures b != null ==> !\result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:62: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:49:) in method arrcmp
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:62:
    //@ ensures b != null ==> !\result;
        ^
2 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:193:) in method arrcmp
            __Loop_Invariant_Dummy1(a, b, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:193: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:55:
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:67: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:202: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:49:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:202:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:6: verify: Precondition conjunct is false: 5 <= a.length
    //@ requires 5 <= a.length;
                   ^
6 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:192:) in method arrcmp
            __Loop_Invariant_Dummy1(a, b, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:192: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:55:
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:69: verify: Precondition conjunct is false: 5 != a.length
    //@ requires 5 != a.length;
                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:201: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:49:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:201:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:6: verify: Precondition conjunct is false: 5 <= a.length
    //@ requires 5 <= a.length;
                   ^
6 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:191:) in method arrcmp
            __Loop_Invariant_Dummy1(a, b, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:191: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:55:
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:70: verify: Precondition conjunct is false: 5 > a.length
    //@ requires 5 > a.length;
                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:200: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:49:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:200:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:6: verify: Precondition conjunct is false: 5 <= a.length
    //@ requires 5 <= a.length;
                   ^
6 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:190:) in method arrcmp
            __Loop_Invariant_Dummy1(a, b, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:190: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:55:
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:72: verify: Precondition conjunct is false: 2 == a.length
    //@ requires 2 == a.length;
                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:199: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:49:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:199:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:6: verify: Precondition conjunct is false: 5 <= a.length
    //@ requires 5 <= a.length;
                   ^
6 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:189:) in method arrcmp
            __Loop_Invariant_Dummy1(a, b, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:189: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:55:
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:73: verify: Precondition conjunct is false: 2 >= a.length
    //@ requires 2 >= a.length;
                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:198: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:49:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:198:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:6: verify: Precondition conjunct is false: 5 <= a.length
    //@ requires 5 <= a.length;
                   ^
6 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:188:) in method arrcmp
            __Loop_Invariant_Dummy1(a, b, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:188: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:55:
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:73: verify: Precondition conjunct is false: 2 > a.length
    //@ requires 2 > a.length;
                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:197: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:49:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:197:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:6: verify: Precondition conjunct is false: 5 <= a.length
    //@ requires 5 <= a.length;
                   ^
6 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:187:) in method arrcmp
            __Loop_Invariant_Dummy1(a, b, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:187: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:55:
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:75: verify: Precondition conjunct is false: 1 == a.length
    //@ requires 1 == a.length;
                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:196: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:49:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:196:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:6: verify: Precondition conjunct is false: 5 <= a.length
    //@ requires 5 <= a.length;
                   ^
6 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:186:) in method arrcmp
            __Loop_Invariant_Dummy1(a, b, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:186: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:55:
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:76: verify: Precondition conjunct is false: 1 >= a.length
    //@ requires 1 >= a.length;
                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:195: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:49:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:195:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:6: verify: Precondition conjunct is false: 5 <= a.length
    //@ requires 5 <= a.length;
                   ^
6 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:185:) in method arrcmp
            __Loop_Invariant_Dummy1(a, b, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:185: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:55:
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:76: verify: Precondition conjunct is false: 1 > a.length
    //@ requires 1 > a.length;
                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:194: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:49:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:194:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:6: verify: Precondition conjunct is false: 5 <= a.length
    //@ requires 5 <= a.length;
                   ^
6 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:184:) in method arrcmp
            __Loop_Invariant_Dummy1(a, b, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:184: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:55:
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:78: verify: Precondition conjunct is false: -1 == a.length
    //@ requires -1 == a.length;
                    ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:193: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:49:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:193:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:6: verify: Precondition conjunct is false: 5 <= a.length
    //@ requires 5 <= a.length;
                   ^
6 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:183:) in method arrcmp
            __Loop_Invariant_Dummy1(a, b, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:183: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:55:
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:79: verify: Precondition conjunct is false: -1 >= a.length
    //@ requires -1 >= a.length;
                    ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:192: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:49:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:192:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:6: verify: Precondition conjunct is false: 5 <= a.length
    //@ requires 5 <= a.length;
                   ^
6 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires -1 > a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:182:) in method arrcmp
            __Loop_Invariant_Dummy1(a, b, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:182: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:55:
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:79: verify: Precondition conjunct is false: -1 > a.length
    //@ requires -1 > a.length;
                    ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:191: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:49:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:191:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:6: verify: Precondition conjunct is false: 5 <= a.length
    //@ requires 5 <= a.length;
                   ^
6 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 < a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


/home/max/Documents/JMLGPT/tmp/CompareArray.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:181:) in method arrcmp
            __Loop_Invariant_Dummy1(a, b, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:181: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:55:
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:79: verify: Precondition conjunct is false: 9 < a.length
    //@ requires 9 < a.length;
                   ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:190: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:49:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:190:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:6: verify: Precondition conjunct is false: 5 <= a.length
    //@ requires 5 <= a.length;
                   ^
6 verification failures

class CompareArray {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length >= b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 >= b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 != b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 != b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 != b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ ensures \result;
    //@ ensures a == null ==> \result;
    //@ ensures a == null ==> !\result;
    //@ ensures a != null ==> \result;
    //@ ensures b == null ==> \result;
    //@ ensures b == null ==> !\result;
    //@ ensures b != null ==> \result;
    public static boolean arrcmp(int[] a, int[] b) {
        if(a.length != b.length) {
	        return false;
        }

        for(int i = 0; i < a.length; i++) {
            __Loop_Invariant_Dummy1(a, b, i);
            if(a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires 9 <= a.length;
    //@ requires 9 == a.length;
    //@ requires 9 != a.length;
    //@ requires 9 >= a.length;
    //@ requires 9 > a.length;
    //@ requires 6 < b.length;
    //@ requires 6 <= b.length;
    //@ requires 6 == b.length;
    //@ requires 6 != b.length;
    //@ requires 6 >= b.length;
    //@ requires 6 > b.length;
    //@ requires a.length < b.length;
    //@ requires a.length <= b.length;
    //@ requires a.length == b.length;
    //@ requires a.length != b.length;
    //@ requires a.length >= b.length;
    //@ requires a.length > b.length;
    //@ requires 5 < b.length;
    //@ requires 5 <= b.length;
    //@ requires 5 == b.length;
    //@ requires 5 != b.length;
    //@ requires 5 >= b.length;
    //@ requires 5 > b.length;
    //@ requires 2 < b.length;
    //@ requires 2 <= b.length;
    //@ requires 2 == b.length;
    //@ requires 2 != b.length;
    //@ requires 2 >= b.length;
    //@ requires 2 > b.length;
    //@ requires 1 < b.length;
    //@ requires 1 <= b.length;
    //@ requires 1 == b.length;
    //@ requires 1 != b.length;
    //@ requires 1 >= b.length;
    //@ requires 1 > b.length;
    //@ requires -1 < b.length;
    //@ requires -1 <= b.length;
    //@ requires -1 == b.length;
    //@ requires -1 != b.length;
    //@ requires -1 >= b.length;
    //@ requires -1 > b.length;
    //@ requires 9 < b.length;
    //@ requires 9 <= b.length;
    //@ requires 9 == b.length;
    //@ requires 9 != b.length;
    //@ requires 9 >= b.length;
    //@ requires 9 > b.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < b.length;
    //@ requires i <= b.length;
    //@ requires i == b.length;
    //@ requires i != b.length;
    //@ requires i >= b.length;
    //@ requires i > b.length;
    //@ requires i < a.length;
    //@ requires i <= a.length;
    //@ requires i == a.length;
    //@ requires i != a.length;
    //@ requires i >= a.length;
    //@ requires i > a.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int[] b, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr1 = new int[]{-2, -1, 0, 1, 2};
        int[] arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0};
        arr2 = new int[]{-2, -1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -1};
        arr2 = new int[]{0, 1};
        arrcmp(arr1, arr2);
        arr1 = new int[]{2, 3};
        arr2 = new int[]{2, 3};
        arrcmp(arr1, arr2);
        arr1 = new int[]{0, 1};
        arr2 = new int[]{-2, -1, 0, 1, 2};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3};
        arr2 = new int[]{0};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 114514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 34, 387, 837};
        arrcmp(arr1, arr2);
        arr1 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arr2 = new int[]{-2, -3, 114, 514, 1919, 810, 19, 123, 348};
        arrcmp(arr1, arr2);
    }
}


error: An error while executing a proof script for arrcmp: (error "Error writing to Z3 solver: org.smtlib.IVisitor$VisitorException: org.smtlib.IVisitor$VisitorException: Did not expect an empty argument list")
/home/max/Documents/JMLGPT/tmp/CompareArray.java:189: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/CompareArray.java:49:) in method main
        arrcmp(arr1, arr2);
              ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CompareArray.java:189:
    public static boolean arrcmp(int[] a, int[] b) {
                          ^
/home/max/Documents/JMLGPT/tmp/CompareArray.java:6: verify: Precondition conjunct is false: 5 <= a.length
    //@ requires 5 <= a.length;
                   ^
1 error
3 verification failures

