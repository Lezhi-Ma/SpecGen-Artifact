public class Perimeter
{   

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static long Perimeter(short x)
    {
	long squarePerimeter = 4 * (long)x;
	return squarePerimeter;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static long Perimeter(int x)
    {
	long pentagonPerimeter = 5 * (long)x;
	return pentagonPerimeter;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static long Perimeter(long x)
    {
	long hexagonalPerimeter = 6 * x;
	return hexagonalPerimeter;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static long Perimeter(int x, int y)
    {
	long perimeterRectangle = 2*((long)x + (long)y);
	return perimeterRectangle;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires z < x;
    //@ requires z <= x;
    //@ requires z == x;
    //@ requires z != x;
    //@ requires z >= x;
    //@ requires z > x;
    //@ requires z < 1;
    //@ requires z <= 1;
    //@ requires z == 1;
    //@ requires z != 1;
    //@ requires z >= 1;
    //@ requires z > 1;
    //@ requires z < 0;
    //@ requires z <= 0;
    //@ requires z == 0;
    //@ requires z != 0;
    //@ requires z >= 0;
    //@ requires z > 0;
    //@ requires z < -1;
    //@ requires z <= -1;
    //@ requires z == -1;
    //@ requires z != -1;
    //@ requires z >= -1;
    //@ requires z > -1;
    //@ requires z < y;
    //@ requires z <= y;
    //@ requires z == y;
    //@ requires z != y;
    //@ requires z >= y;
    //@ requires z > y;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < z;
    //@ ensures \result <= z;
    //@ ensures \result == z;
    //@ ensures \result != z;
    //@ ensures \result >= z;
    //@ ensures \result > z;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    //@ ensures z >= 0 ==> \result >= 0;
    public static long Perimeter(int x, int y, int z)
    {
	long trianglePerimeter = (long)x + (long)y + (long)z;
	return trianglePerimeter;
    }

    //@ requires w < 1;
    //@ requires w <= 1;
    //@ requires w == 1;
    //@ requires w != 1;
    //@ requires w >= 1;
    //@ requires w > 1;
    //@ requires w < 0;
    //@ requires w <= 0;
    //@ requires w == 0;
    //@ requires w != 0;
    //@ requires w >= 0;
    //@ requires w > 0;
    //@ requires w < -1;
    //@ requires w <= -1;
    //@ requires w == -1;
    //@ requires w != -1;
    //@ requires w >= -1;
    //@ requires w > -1;
    //@ requires x < w;
    //@ requires x <= w;
    //@ requires x == w;
    //@ requires x != w;
    //@ requires x >= w;
    //@ requires x > w;
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < w;
    //@ requires y <= w;
    //@ requires y == w;
    //@ requires y != w;
    //@ requires y >= w;
    //@ requires y > w;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires z < x;
    //@ requires z <= x;
    //@ requires z == x;
    //@ requires z != x;
    //@ requires z >= x;
    //@ requires z > x;
    //@ requires z < w;
    //@ requires z <= w;
    //@ requires z == w;
    //@ requires z != w;
    //@ requires z >= w;
    //@ requires z > w;
    //@ requires z < 1;
    //@ requires z <= 1;
    //@ requires z == 1;
    //@ requires z != 1;
    //@ requires z >= 1;
    //@ requires z > 1;
    //@ requires z < 0;
    //@ requires z <= 0;
    //@ requires z == 0;
    //@ requires z != 0;
    //@ requires z >= 0;
    //@ requires z > 0;
    //@ requires z < -1;
    //@ requires z <= -1;
    //@ requires z == -1;
    //@ requires z != -1;
    //@ requires z >= -1;
    //@ requires z > -1;
    //@ requires z < y;
    //@ requires z <= y;
    //@ requires z == y;
    //@ requires z != y;
    //@ requires z >= y;
    //@ requires z > y;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < w;
    //@ ensures \result <= w;
    //@ ensures \result == w;
    //@ ensures \result != w;
    //@ ensures \result >= w;
    //@ ensures \result > w;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < z;
    //@ ensures \result <= z;
    //@ ensures \result == z;
    //@ ensures \result != z;
    //@ ensures \result >= z;
    //@ ensures \result > z;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures w >= 0 ==> \result >= 0;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    //@ ensures z >= 0 ==> \result >= 0;
    public static long Perimeter(int w, int x, int y, int z)
    {
	long trapeziumPerimeter = (long)w + (long)x + (long)y + (long)z;
	return trapeziumPerimeter;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        Perimeter((short)-2);
        Perimeter((short)-1);
        Perimeter((short)0);
        Perimeter((short)1);
        Perimeter((short)2);
        Perimeter(-2);
        Perimeter(-1);
        Perimeter(0);
        Perimeter(1);
        Perimeter(2);
        Perimeter((long)-2);
        Perimeter((long)-1);
        Perimeter((long)0);
        Perimeter((long)1);
        Perimeter((long)2);

        Perimeter(-4, 0);
        Perimeter(0, -4);
        Perimeter(4, 0);
        Perimeter(0, 4);
        Perimeter(-4, -4);
        Perimeter(4, 4);
        Perimeter(0, 0);
        Perimeter(-4, 4);
        Perimeter(4, -4);
        Perimeter(1, -1);
        Perimeter(-1, 1);

        Perimeter(-4, 0, -4);
        Perimeter(0, -4, 4);
        Perimeter(4, 0, 0);
        Perimeter(0, 4, 0);
        Perimeter(-4, -4, -1);
        Perimeter(4, 4, 1);
        Perimeter(0, 0, 2);
        Perimeter(-4, 4, -2);
        Perimeter(4, -4, 6);
        Perimeter(1, -1, -6);
        Perimeter(-1, 1, -1);

        Perimeter(-4, 0, -4, -4);
        Perimeter(0, -4, 4, 0);
        Perimeter(4, 0, 0, 1);
        Perimeter(0, 4, 0, -1);
        Perimeter(-4, -4, -1, 4);
        Perimeter(4, 4, 1, 0);
        Perimeter(0, 0, 2, 0);
        Perimeter(0, 2, 0, 0);
        Perimeter(-4, 4, -2, -2);
        Perimeter(4, -4, 6, 1);
        Perimeter(1, -1, -6, -2);
        Perimeter(-1, 1, -1, 1);
    }
}


java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1888)
	at java.base/java.util.HashMap.putVal(HashMap.java:631)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:516)
	at java.base/java.util.HashMap.putAll(HashMap.java:785)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2$VarMap.putAll(BasicBlocker2.java:2513)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.initMap(BasicBlocker2.java:792)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.setCurrentBlock(BasicBlocker2.java:545)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.setCurrentBlock(BasicBlocker2.java:152)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.startBlock(BasicBlockerParent.java:463)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlock(BasicBlockerParent.java:404)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlocks(BasicBlockerParent.java:352)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.visitTry(BasicBlockerParent.java:1048)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCTry.accept(JCTree.java:1401)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processStats(BasicBlockerParent.java:426)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processCurrentBlock(BasicBlockerParent.java:418)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlock(BasicBlockerParent.java:405)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlocks(BasicBlockerParent.java:352)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.convertMethodBody(BasicBlocker2.java:617)
	at jdk.compiler/org.jmlspecs.openjml.esc.MethodProverSMT.prove(MethodProverSMT.java:361)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.doMethod(JmlEsc.java:329)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.visitMethodDef(JmlEsc.java:221)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.visitJmlMethodDecl(JmlTreeScanner.java:238)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodDecl.accept(JmlTree.java:1383)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.visitClassDef(JmlEsc.java:169)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.visitJmlClassDecl(JmlTreeScanner.java:106)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlClassDecl.accept(JmlTree.java:1295)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.check(JmlEsc.java:117)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.esc(JmlCompiler.java:536)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.flow(JmlCompiler.java:362)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:936)
/home/max/Documents/JMLGPT/tmp/Perimeter.java:509: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
    public static void main(String[] args) {
                       ^
  Reason: Prover aborted with exception: ZZZZZ
1 error

