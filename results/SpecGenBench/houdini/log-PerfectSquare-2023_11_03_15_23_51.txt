class PerfectSquare {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:83: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:24:) in method main
        isPerfectSquare(0);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:83:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:4: verify: Precondition conjunct is false: num == 1
    //@ requires num == 1;
                     ^
3 verification failures

class PerfectSquare {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:23:) in method main
        isPerfectSquare(0);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:82:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:5: verify: Precondition conjunct is false: num >= 1
    //@ requires num >= 1;
                     ^
3 verification failures

class PerfectSquare {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:81: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:22:) in method main
        isPerfectSquare(0);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:81:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:5: verify: Precondition conjunct is false: num > 1
    //@ requires num > 1;
                     ^
3 verification failures

class PerfectSquare {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:80: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:21:) in method main
        isPerfectSquare(0);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:80:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:5: verify: Precondition conjunct is false: num < 0
    //@ requires num < 0;
                     ^
3 verification failures

class PerfectSquare {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:79: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:20:) in method main
        isPerfectSquare(0);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:79:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:7: verify: Precondition conjunct is false: num != 0
    //@ requires num != 0;
                     ^
3 verification failures

class PerfectSquare {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:19:) in method main
        isPerfectSquare(0);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:78:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:8: verify: Precondition conjunct is false: num > 0
    //@ requires num > 0;
                     ^
3 verification failures

class PerfectSquare {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:77: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18:) in method main
        isPerfectSquare(0);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:77:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:8: verify: Precondition conjunct is false: num < -1
    //@ requires num < -1;
                     ^
3 verification failures

class PerfectSquare {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:76: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:17:) in method main
        isPerfectSquare(0);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:76:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:8: verify: Precondition conjunct is false: num <= -1
    //@ requires num <= -1;
                     ^
3 verification failures

class PerfectSquare {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:16:) in method main
        isPerfectSquare(0);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:75:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:8: verify: Precondition conjunct is false: num == -1
    //@ requires num == -1;
                     ^
3 verification failures

class PerfectSquare {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:12:) in method isPerfectSquare
            return true;
            ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:17:
    //@ ensures !\result;
        ^
2 verification failures

class PerfectSquare {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:13:) in method isPerfectSquare
            return true;
            ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:16:
    //@ ensures num >= 0 ==> !\result;
        ^
2 verification failures

class PerfectSquare {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:73: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:13:) in method main
        isPerfectSquare(1);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:73:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num < 1
    //@ requires num < 1;
                     ^
3 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:12:) in method main
        isPerfectSquare(1);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:72:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3: verify: Precondition conjunct is false: num != 1
    //@ requires num != 1;
                     ^
3 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:71: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:11:) in method main
        isPerfectSquare(1);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:71:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3: verify: Precondition conjunct is false: num <= 0
    //@ requires num <= 0;
                     ^
3 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:70: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10:) in method main
        isPerfectSquare(1);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:70:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3: verify: Precondition conjunct is false: num == 0
    //@ requires num == 0;
                     ^
3 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:64:) in method isPerfectSquare
        __Loop_Invariant_Dummy1(num, i);
                               ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:22: verify: Precondition conjunct is false: num < 1
    //@ requires num < 1;
                     ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:70: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:70:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:63:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:24: verify: Precondition conjunct is false: num != 1
    //@ requires num != 1;
                     ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:69:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:62:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:25: verify: Precondition conjunct is false: num > 1
    //@ requires num > 1;
                     ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:68:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:61:) in method isPerfectSquare
        __Loop_Invariant_Dummy1(num, i);
                               ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:25: verify: Precondition conjunct is false: num < 0
    //@ requires num < 0;
                     ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:67:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:60:) in method isPerfectSquare
        __Loop_Invariant_Dummy1(num, i);
                               ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:25: verify: Precondition conjunct is false: num <= 0
    //@ requires num <= 0;
                     ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:66: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:66:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:59:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:25: verify: Precondition conjunct is false: num == 0
    //@ requires num == 0;
                     ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:65:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:58:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:28: verify: Precondition conjunct is false: num < -1
    //@ requires num < -1;
                     ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:64:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:57:) in method isPerfectSquare
        __Loop_Invariant_Dummy1(num, i);
                               ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:28: verify: Precondition conjunct is false: num <= -1
    //@ requires num <= -1;
                     ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:63: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:63:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:56:) in method isPerfectSquare
        __Loop_Invariant_Dummy1(num, i);
                               ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:28: verify: Precondition conjunct is false: num == -1
    //@ requires num == -1;
                     ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:62:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:55:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:33: verify: Precondition conjunct is false: i == num
    //@ requires i == num;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:61:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:54:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:31: verify: Precondition conjunct is false: i < num
    //@ requires i < num;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:60: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:60:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i <= num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:53:) in method isPerfectSquare
        __Loop_Invariant_Dummy1(num, i);
                               ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:31: verify: Precondition conjunct is false: i <= num
    //@ requires i <= num;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:59:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:52:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:32: verify: Precondition conjunct is false: i >= num
    //@ requires i >= num;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:58: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:58:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i != num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:51:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:31: verify: Precondition conjunct is false: i != num
    //@ requires i != num;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:57: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:57:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:50:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:31: verify: Precondition conjunct is false: i > num
    //@ requires i > num;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:56: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:56:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:49:) in method isPerfectSquare
        __Loop_Invariant_Dummy1(num, i);
                               ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:31: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:55:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:48:) in method isPerfectSquare
        __Loop_Invariant_Dummy1(num, i);
                               ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:32: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:54: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:54:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:47:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:33: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:53: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:53:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:46:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:33: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:52:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:45:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:35: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:51: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:51:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:44:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:36: verify: Precondition conjunct is false: i >= 0
    //@ requires i >= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:50:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:43:) in method isPerfectSquare
        __Loop_Invariant_Dummy1(num, i);
                               ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:31: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:49: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:49:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:42:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:31: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:48:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:41:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:34: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:47:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:40:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:31: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:46:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:39:) in method isPerfectSquare
        __Loop_Invariant_Dummy1(num, i);
                               ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:31: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:45:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i != 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:38:) in method isPerfectSquare
        __Loop_Invariant_Dummy1(num, i);
                               ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:34: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:44:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i != 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:37:) in method isPerfectSquare
        __Loop_Invariant_Dummy1(num, i);
                               ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:32: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:43:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:36:) in method isPerfectSquare
        __Loop_Invariant_Dummy1(num, i);
                               ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:32: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:42:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i != 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:35:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:31: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:41:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:34:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:31: verify: Precondition conjunct is false: i != -1
    //@ requires i != -1;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:40:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:33:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:32: verify: Precondition conjunct is false: i > -1
    //@ requires i > -1;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:39:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i >= -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:32:) in method isPerfectSquare
        __Loop_Invariant_Dummy1(num, i);
                               ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:31: verify: Precondition conjunct is false: i >= -1
    //@ requires i >= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:38:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:7:) in method isPerfectSquare
        return false;
        ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:19:
    //@ ensures \result;
        ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:37: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:37:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
5 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures num >= 0 ==> \result;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:7:) in method isPerfectSquare
        return false;
        ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18:
    //@ ensures num >= 0 ==> \result;
        ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:36: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:8:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:36:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
5 verification failures

class PerfectSquare {
    //@ requires num <= 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:7:) in method main
        isPerfectSquare(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:35:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
3 verification failures

class PerfectSquare {
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:28:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:11:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:19: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:6:) in method main
        isPerfectSquare(-1);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:35:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num >= 0
    //@ requires num >= 0;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:27:) in method isPerfectSquare
            __Loop_Invariant_Dummy1(num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:11:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:19: verify: Precondition conjunct is false: num == 1
    //@ requires num == 1;
                     ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:6:) in method main
        isPerfectSquare(-1);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:34:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num >= 0
    //@ requires num >= 0;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:33: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:6:) in method main
        isPerfectSquare(-1);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:33:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num >= 0
    //@ requires num >= 0;
                     ^
3 verification failures

class PerfectSquare {
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:32: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:5:) in method main
        isPerfectSquare(-1);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:32:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num != -1
    //@ requires num != -1;
                     ^
3 verification failures

class PerfectSquare {
    //@ requires num >= -1;
    //@ requires num > -1;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:4:) in method main
        isPerfectSquare(-1);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:31:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3: verify: Precondition conjunct is false: num > -1
    //@ requires num > -1;
                     ^
3 verification failures

class PerfectSquare {
    //@ requires num >= -1;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num >= 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:23:) in method isPerfectSquare
        __Loop_Invariant_Dummy1(num, i);
                               ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:12:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:16: verify: Precondition conjunct is false: num >= 1
    //@ requires num >= 1;
                     ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3:) in method main
        isPerfectSquare(-2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:31:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num >= -1
    //@ requires num >= -1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num >= -1;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:22:) in method isPerfectSquare
        __Loop_Invariant_Dummy1(num, i);
                               ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:12:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:17: verify: Precondition conjunct is false: num >= 0
    //@ requires num >= 0;
                     ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3:) in method main
        isPerfectSquare(-2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:30:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num >= -1
    //@ requires num >= -1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num >= -1;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num != 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:21:) in method isPerfectSquare
        __Loop_Invariant_Dummy1(num, i);
                               ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:12:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:17: verify: Precondition conjunct is false: num > 0
    //@ requires num > 0;
                     ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3:) in method main
        isPerfectSquare(-2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:29:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num >= -1
    //@ requires num >= -1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num >= -1;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num != 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:20:) in method isPerfectSquare
        __Loop_Invariant_Dummy1(num, i);
                               ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:12:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:17: verify: Precondition conjunct is false: num != -1
    //@ requires num != -1;
                     ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:28: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3:) in method main
        isPerfectSquare(-2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:28:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num >= -1
    //@ requires num >= -1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num >= -1;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num != 0;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:19:) in method isPerfectSquare
        __Loop_Invariant_Dummy1(num, i);
                               ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:12:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:18: verify: Precondition conjunct is false: num > -1
    //@ requires num > -1;
                     ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3:) in method main
        isPerfectSquare(-2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:27:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num >= -1
    //@ requires num >= -1;
                     ^
6 verification failures

class PerfectSquare {
    //@ requires num >= -1;
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num != 0;
    //@ requires num >= -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3:) in method main
        isPerfectSquare(-2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:26:
    public static boolean isPerfectSquare(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:2: verify: Precondition conjunct is false: num >= -1
    //@ requires num >= -1;
                     ^
3 verification failures

class PerfectSquare {
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num != 0;
    //@ requires num >= -1;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:17:) in method isPerfectSquare
        __Loop_Invariant_Dummy1(num, i);
                               ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:11:
    public static void __Loop_Invariant_Dummy1(int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:16: verify: Precondition conjunct is false: num >= -1
    //@ requires num >= -1;
                     ^
3 verification failures

class PerfectSquare {
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;
        int i;
        for(i = 1; i * i <= num; i++) {
            __Loop_Invariant_Dummy1(num, i);
            if(i * i == num)
                return true;
        }
        __Loop_Invariant_Dummy1(num, i);
        return false;
    }

    //@ requires num != 0;
    public static void __Loop_Invariant_Dummy1(int num, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPerfectSquare(0);
        isPerfectSquare(1);
        isPerfectSquare(2);
        isPerfectSquare(-1);
        isPerfectSquare(-2);
        isPerfectSquare(4);
        isPerfectSquare(25);
        isPerfectSquare(5);
        isPerfectSquare(49);
        isPerfectSquare(16);
    }
}



