public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < n;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ non_null
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:82: error: No modifiers are allowed prior to a lightweight specification case
	//@ non_null
	    ^
1 error

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < n;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:133: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:46:) in method __HoudiniInvoker
		fibCompute(-1);
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:133:
	public static int fibCompute(int n) {
	                  ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:5: verify: Precondition conjunct is false: n == 1
	//@ requires n == 1;
	               ^
3 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < n;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:132: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:45:) in method __HoudiniInvoker
		fibCompute(-1);
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:132:
	public static int fibCompute(int n) {
	                  ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:6: verify: Precondition conjunct is false: n >= 1
	//@ requires n >= 1;
	               ^
3 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < n;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:131: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:44:) in method __HoudiniInvoker
		fibCompute(-1);
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:131:
	public static int fibCompute(int n) {
	                  ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:6: verify: Precondition conjunct is false: n > 1
	//@ requires n > 1;
	               ^
3 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < n;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:130: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:43:) in method __HoudiniInvoker
		fibCompute(-1);
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:130:
	public static int fibCompute(int n) {
	                  ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:8: verify: Precondition conjunct is false: n == 0
	//@ requires n == 0;
	               ^
3 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < n;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:129: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:42:) in method __HoudiniInvoker
		fibCompute(-1);
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:129:
	public static int fibCompute(int n) {
	                  ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:9: verify: Precondition conjunct is false: n >= 0
	//@ requires n >= 0;
	               ^
3 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < n;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:128: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:41:) in method __HoudiniInvoker
		fibCompute(-1);
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:128:
	public static int fibCompute(int n) {
	                  ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:9: verify: Precondition conjunct is false: n > 0
	//@ requires n > 0;
	               ^
3 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < n;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:127: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:40:) in method __HoudiniInvoker
		fibCompute(-1);
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:127:
	public static int fibCompute(int n) {
	                  ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:9: verify: Precondition conjunct is false: n < -1
	//@ requires n < -1;
	               ^
3 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < n;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:126: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:39:) in method __HoudiniInvoker
		fibCompute(-1);
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:126:
	public static int fibCompute(int n) {
	                  ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:11: verify: Precondition conjunct is false: n != -1
	//@ requires n != -1;
	               ^
3 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < n;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:125: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:38:) in method __HoudiniInvoker
		fibCompute(-1);
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:125:
	public static int fibCompute(int n) {
	                  ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:12: verify: Precondition conjunct is false: n > -1
	//@ requires n > -1;
	               ^
3 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n >= -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < n;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:38: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:14:) in method fibCompute
		if(n < 0) return -1;
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:38:
	//@ ensures \result == 1;
	    ^
2 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n >= -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < n;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:37: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:15:) in method fibCompute
		if(n < 0) return -1;
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:37:
	//@ ensures \result >= 1;
	    ^
2 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n >= -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < n;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:36: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:15:) in method fibCompute
		if(n < 0) return -1;
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:36:
	//@ ensures \result > 1;
	    ^
2 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n >= -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < n;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:35: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:17:) in method fibCompute
		if(n < 0) return -1;
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:35:
	//@ ensures \result == 0;
	    ^
2 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n >= -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < n;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:34: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:18:) in method fibCompute
		if(n < 0) return -1;
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:34:
	//@ ensures \result >= 0;
	    ^
2 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n >= -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < n;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:33: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:18:) in method fibCompute
		if(n < 0) return -1;
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:33:
	//@ ensures \result > 0;
	    ^
2 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n >= -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < n;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:18:) in method fibCompute
		if(n < 0) return -1;
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:32:
	//@ ensures \result < -1;
	    ^
2 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n >= -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < n;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:31: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:20:) in method fibCompute
		if(n < 0) return -1;
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:31:
	//@ ensures \result != -1;
	    ^
2 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n >= -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < n;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:21:) in method fibCompute
		if(n < 0) return -1;
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:30:
	//@ ensures \result > -1;
	    ^
2 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n >= -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result >= -1;
	//@ ensures \result < n;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:29: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:21:) in method fibCompute
		if(n < 0) return -1;
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:29:
	//@ ensures \result < n;
	    ^
2 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n >= -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result >= -1;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result != n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:23:) in method fibCompute
		if(n < 0) return -1;
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:28:
	//@ ensures \result != n;
	    ^
2 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n >= -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result >= -1;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result >= n;
	//@ ensures \result > n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:24:) in method fibCompute
		if(n < 0) return -1;
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:27:
	//@ ensures \result > n;
	    ^
2 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n >= -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result >= -1;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result >= n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:113: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:25:) in method __HoudiniInvoker
		fibCompute(-2);
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:113:
	public static int fibCompute(int n) {
	                  ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:10: verify: Precondition conjunct is false: n == -1
	//@ requires n == -1;
	               ^
3 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n <= -1;
	//@ requires n >= -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result >= -1;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result >= n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:112: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:24:) in method __HoudiniInvoker
		fibCompute(-2);
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:112:
	public static int fibCompute(int n) {
	                  ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:10: verify: Precondition conjunct is false: n >= -1
	//@ requires n >= -1;
	               ^
3 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n <= -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result >= -1;
	//@ ensures \result <= n;
	//@ ensures \result == n;
	//@ ensures \result >= n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:19:) in method fibCompute
		if(n < 0) return -1;
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:24:
	//@ ensures \result <= n;
	    ^
2 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n <= -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result >= -1;
	//@ ensures \result == n;
	//@ ensures \result >= n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:19:) in method fibCompute
		if(n < 0) return -1;
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:23:
	//@ ensures \result == n;
	    ^
2 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n <= -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result >= -1;
	//@ ensures \result >= n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:110: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:21:) in method __HoudiniInvoker
		fibCompute(0);
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:110:
	public static int fibCompute(int n) {
	                  ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:6: verify: Precondition conjunct is false: n < 0
	//@ requires n < 0;
	               ^
3 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n <= 0;
	//@ requires n != 0;
	//@ requires n <= -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result >= -1;
	//@ ensures \result >= n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:109: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:20:) in method __HoudiniInvoker
		fibCompute(0);
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:109:
	public static int fibCompute(int n) {
	                  ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:7: verify: Precondition conjunct is false: n != 0
	//@ requires n != 0;
	               ^
3 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n <= 0;
	//@ requires n <= -1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result >= -1;
	//@ ensures \result >= n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:108: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:19:) in method __HoudiniInvoker
		fibCompute(0);
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:108:
	public static int fibCompute(int n) {
	                  ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:7: verify: Precondition conjunct is false: n <= -1
	//@ requires n <= -1;
	               ^
3 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n <= 0;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result >= -1;
	//@ ensures \result >= n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:10:) in method fibCompute
		else if(n == 0) return 0;
		                ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:20:
	//@ ensures \result < 0;
	    ^
2 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n <= 0;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result >= -1;
	//@ ensures \result >= n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:11:) in method fibCompute
		else if(n == 0) return 0;
		                ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:19:
	//@ ensures \result != 0;
	    ^
2 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n <= 0;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result >= -1;
	//@ ensures \result >= n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:18: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:11:) in method fibCompute
		else if(n == 0) return 0;
		                ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:18:
	//@ ensures \result <= -1;
	    ^
2 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n <= 0;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result == -1;
	//@ ensures \result >= -1;
	//@ ensures \result >= n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:11:) in method fibCompute
		else if(n == 0) return 0;
		                ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:17:
	//@ ensures \result == -1;
	    ^
2 verification failures

public class Fibonacci {

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n <= 0;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result >= -1;
	//@ ensures \result >= n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:104: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:14:) in method __HoudiniInvoker
		fibCompute(1);
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:104:
	public static int fibCompute(int n) {
	                  ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:3: verify: Precondition conjunct is false: n < 1
	//@ requires n < 1;
	               ^
3 verification failures

public class Fibonacci {

	//@ requires n <= 1;
	//@ requires n != 1;
	//@ requires n <= 0;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result >= -1;
	//@ ensures \result >= n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:103: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:) in method __HoudiniInvoker
		fibCompute(1);
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:103:
	public static int fibCompute(int n) {
	                  ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:4: verify: Precondition conjunct is false: n != 1
	//@ requires n != 1;
	               ^
3 verification failures

public class Fibonacci {

	//@ requires n <= 1;
	//@ requires n <= 0;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result >= -1;
	//@ ensures \result >= n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:102: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:12:) in method __HoudiniInvoker
		fibCompute(1);
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:102:
	public static int fibCompute(int n) {
	                  ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:4: verify: Precondition conjunct is false: n <= 0
	//@ requires n <= 0;
	               ^
3 verification failures

public class Fibonacci {

	//@ requires n <= 1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result >= -1;
	//@ ensures \result >= n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n < 1;
	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:95:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:21:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:29: verify: Precondition conjunct is false: n < 1
	//@ requires n < 1;
	               ^
3 verification failures

public class Fibonacci {

	//@ requires n <= 1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result >= -1;
	//@ ensures \result >= n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n != 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:94:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:21:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:31: verify: Precondition conjunct is false: n != 1
	//@ requires n != 1;
	               ^
3 verification failures

public class Fibonacci {

	//@ requires n <= 1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result >= -1;
	//@ ensures \result >= n;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:9:) in method fibCompute
		return fib[n];
		^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:26:
	//@ ensures \result >= n;
	    ^
2 verification failures

public class Fibonacci {

	//@ requires n <= 1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result >= -1;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:99: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:10:) in method __HoudiniInvoker
		fibCompute(2);
		          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:99:
	public static int fibCompute(int n) {
	                  ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:3: verify: Precondition conjunct is false: n <= 1
	//@ requires n <= 1;
	               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:92:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:20:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:31: verify: Precondition conjunct is false: n > 1
	//@ requires n > 1;
	               ^
6 verification failures

public class Fibonacci {

	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result >= -1;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n >= 1;
	//@ requires n > 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:91:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:19:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:30: verify: Precondition conjunct is false: n > 1
	//@ requires n > 1;
	               ^
3 verification failures

public class Fibonacci {

	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result >= -1;
	//@ ensures n >= 0 ==> \result >= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n >= 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:8:) in method fibCompute
		return fib[n];
		^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:24:
	//@ ensures n >= 0 ==> \result >= 0;
	    ^
2 verification failures

public class Fibonacci {

	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result >= -1;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n >= 1;
	//@ requires n < 0;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:89:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:18:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:29: verify: Precondition conjunct is false: n < 0
	//@ requires n < 0;
	               ^
3 verification failures

public class Fibonacci {

	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result >= -1;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n >= 1;
	//@ requires n <= 0;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:88:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:18:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:29: verify: Precondition conjunct is false: n <= 0
	//@ requires n <= 0;
	               ^
3 verification failures

public class Fibonacci {

	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result >= -1;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n >= 1;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:7:) in method fibCompute
		return fib[n];
		^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:23:
	//@ ensures \result >= -1;
	    ^
2 verification failures

public class Fibonacci {

	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n >= 1;
	//@ requires n == 0;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:86:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:17:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:28: verify: Precondition conjunct is false: n == 0
	//@ requires n == 0;
	               ^
3 verification failures

public class Fibonacci {

	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n <= 1;
	//@ requires n == 1;
	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:85:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:17:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:25: verify: Precondition conjunct is false: n <= 1
	//@ requires n <= 1;
	               ^
3 verification failures

public class Fibonacci {

	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n == 1;
	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:84:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:17:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:25: verify: Precondition conjunct is false: n == 1
	//@ requires n == 1;
	               ^
3 verification failures

public class Fibonacci {

	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:3:) in method fibCompute
		return fib[n];
		^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:22:
	//@ ensures \result < 1;
	    ^
2 verification failures

public class Fibonacci {

	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n < -1;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:82:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:16:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:28: verify: Precondition conjunct is false: n < -1
	//@ requires n < -1;
	               ^
3 verification failures

public class Fibonacci {

	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n <= -1;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:81:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:16:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:28: verify: Precondition conjunct is false: n <= -1
	//@ requires n <= -1;
	               ^
3 verification failures

public class Fibonacci {

	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n == -1;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:80:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:16:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:28: verify: Precondition conjunct is false: n == -1
	//@ requires n == -1;
	               ^
3 verification failures

public class Fibonacci {

	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 == fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:79:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:16:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:33: verify: Precondition conjunct is false: 1 == fib.length
	//@ requires 1 == fib.length;
	               ^
3 verification failures

public class Fibonacci {

	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 >= fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:78:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:16:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:34: verify: Precondition conjunct is false: 1 >= fib.length
	//@ requires 1 >= fib.length;
	               ^
3 verification failures

public class Fibonacci {

	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires 1 > fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:77:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:16:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:34: verify: Precondition conjunct is false: 1 > fib.length
	//@ requires 1 > fib.length;
	               ^
3 verification failures

public class Fibonacci {

	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:3:) in method fibCompute
		return fib[n];
		^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:21:
	//@ ensures \result <= 1;
	    ^
2 verification failures

public class Fibonacci {

	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:4:) in method fibCompute
		return fib[n];
		^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:20:
	//@ ensures \result <= 0;
	    ^
2 verification failures

public class Fibonacci {

	//@ ensures \result != 1;
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:3:) in method fibCompute
		return fib[n];
		^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:19:
	//@ ensures \result != 1;
	    ^
2 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 == fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:73:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:33: verify: Precondition conjunct is false: -1 == fib.length
	//@ requires -1 == fib.length;
	                ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 >= fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:72:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:34: verify: Precondition conjunct is false: -1 >= fib.length
	//@ requires -1 >= fib.length;
	                ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires -1 > fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:71:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:34: verify: Precondition conjunct is false: -1 > fib.length
	//@ requires -1 > fib.length;
	                ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n == fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:70:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:36: verify: Precondition conjunct is false: n == fib.length
	//@ requires n == fib.length;
	               ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires n >= fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:69:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:37: verify: Precondition conjunct is false: n >= fib.length
	//@ requires n >= fib.length;
	               ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires n > fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:68:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:37: verify: Precondition conjunct is false: n > fib.length
	//@ requires n > fib.length;
	               ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index == fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:67:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: Precondition conjunct is false: index == fib.length
	//@ requires index == fib.length;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index >= fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:66:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:40: verify: Precondition conjunct is false: index >= fib.length
	//@ requires index >= fib.length;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index > fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:65:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:40: verify: Precondition conjunct is false: index > fib.length
	//@ requires index > fib.length;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index < 1;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:64:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:40: verify: Precondition conjunct is false: index < 1
	//@ requires index < 1;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index <= 1;
	//@ requires index == 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:63:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:41: verify: Precondition conjunct is false: index == 1
	//@ requires index == 1;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index <= 1;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:62:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:40: verify: Precondition conjunct is false: index <= 1
	//@ requires index <= 1;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index != 1;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:61:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:40: verify: Precondition conjunct is false: index != 1
	//@ requires index != 1;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index >= 1;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:60:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:40: verify: Precondition conjunct is false: index >= 1
	//@ requires index >= 1;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index > 1;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:59:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:40: verify: Precondition conjunct is false: index > 1
	//@ requires index > 1;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index == 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:58:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: verify: Precondition conjunct is false: index == 0
	//@ requires index == 0;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index < 0;
	//@ requires index <= 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:57:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:40: verify: Precondition conjunct is false: index < 0
	//@ requires index < 0;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index <= 0;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:56:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:40: verify: Precondition conjunct is false: index <= 0
	//@ requires index <= 0;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index < -1;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:55:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:43: verify: Precondition conjunct is false: index < -1
	//@ requires index < -1;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index != 0;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:54:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:40: verify: Precondition conjunct is false: index != 0
	//@ requires index != 0;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index >= 0;
	//@ requires index > 0;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:53:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:41: verify: Precondition conjunct is false: index > 0
	//@ requires index > 0;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index >= 0;
	//@ requires index <= -1;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:52:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:41: verify: Precondition conjunct is false: index <= -1
	//@ requires index <= -1;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index >= 0;
	//@ requires index == -1;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:51:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:41: verify: Precondition conjunct is false: index == -1
	//@ requires index == -1;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index >= 0;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index == n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:50:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:46: verify: Precondition conjunct is false: index == n
	//@ requires index == n;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index >= 0;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index < n;
	//@ requires index <= n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:49:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:44: verify: Precondition conjunct is false: index < n
	//@ requires index < n;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index >= 0;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index <= n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:48:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:40: verify: Precondition conjunct is false: index >= 0
	//@ requires index >= 0;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index <= n;
	//@ requires index != n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:47:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:44: verify: Precondition conjunct is false: index != n
	//@ requires index != n;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index != -1;
	//@ requires index >= -1;
	//@ requires index > -1;
	//@ requires index <= n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:46:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:41: verify: Precondition conjunct is false: index >= -1
	//@ requires index >= -1;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index != -1;
	//@ requires index > -1;
	//@ requires index <= n;
	//@ requires index >= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:45:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:43: verify: Precondition conjunct is false: index >= n
	//@ requires index >= n;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index != -1;
	//@ requires index > -1;
	//@ requires index <= n;
	//@ requires index > n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:44:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:43: verify: Precondition conjunct is false: index > n
	//@ requires index > n;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index != -1;
	//@ requires index > -1;
	//@ requires index <= n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:43:) in method fibCompute
			__Loop_Invariant_Dummy1(n, fib, index);
			                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:41: verify: Precondition conjunct is false: index > -1
	//@ requires index > -1;
	                   ^
3 verification failures

public class Fibonacci {

	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	//@ requires n >= 1;
	//@ requires n != 0;
	//@ requires n >= 0;
	//@ requires n > 0;
	//@ requires n != -1;
	//@ requires n >= -1;
	//@ requires n > -1;
	//@ requires 1 < fib.length;
	//@ requires 1 <= fib.length;
	//@ requires 1 != fib.length;
	//@ requires -1 < fib.length;
	//@ requires -1 <= fib.length;
	//@ requires -1 != fib.length;
	//@ requires n < fib.length;
	//@ requires n <= fib.length;
	//@ requires n != fib.length;
	//@ requires index < fib.length;
	//@ requires index <= fib.length;
	//@ requires index != fib.length;
	//@ requires index != -1;
	//@ requires index <= n;
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	public static void __HoudiniInvoker() {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
	}
}


/home/max/Documents/JMLGPT/tmp/Fibonacci.java:14: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method fibCompute
			fib[index] = fib[index - 2] + fib[index - 1];
			                ^
1 verification failure

