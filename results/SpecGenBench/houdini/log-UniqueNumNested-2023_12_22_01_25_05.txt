public class UniqueNumNested {

    //@ non_null
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 9 < arr.length;
    //@ requires 9 <= arr.length;
    //@ requires 9 == arr.length;
    //@ requires 9 != arr.length;
    //@ requires 9 >= arr.length;
    //@ requires 9 > arr.length;
    //@ requires 8 < arr.length;
    //@ requires 8 <= arr.length;
    //@ requires 8 == arr.length;
    //@ requires 8 != arr.length;
    //@ requires 8 >= arr.length;
    //@ requires 8 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < arr.length;
    //@ ensures \result <= arr.length;
    //@ ensures \result == arr.length;
    //@ ensures \result != arr.length;
    //@ ensures \result >= arr.length;
    //@ ensures \result > arr.length;
    //@ ensures \result < 9;
    //@ ensures \result <= 9;
    //@ ensures \result == 9;
    //@ ensures \result != 9;
    //@ ensures \result >= 9;
    //@ ensures \result > 9;
    //@ ensures \result < 8;
    //@ ensures \result <= 8;
    //@ ensures \result == 8;
    //@ ensures \result != 8;
    //@ ensures \result >= 8;
    //@ ensures \result > 8;
    //@ ensures \result < 7;
    //@ ensures \result <= 7;
    //@ ensures \result == 7;
    //@ ensures \result != 7;
    //@ ensures \result >= 7;
    //@ ensures \result > 7;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures arr == null ==> \result >= 0;
    //@ ensures arr != null ==> \result >= 0;
    public static int uniqueNum(int[] arr) {
        for (int i = 0; i < arr.length; ++i) {
            __Loop_Invariant_Dummy1(arr, i);
            int j = 0;
            while(j < arr.length) {
                __Loop_Invariant_Dummy2(arr, i, j);
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
        }
        return -1;
    }

    //@ non_null
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 9 < arr.length;
    //@ requires 9 <= arr.length;
    //@ requires 9 == arr.length;
    //@ requires 9 != arr.length;
    //@ requires 9 >= arr.length;
    //@ requires 9 > arr.length;
    //@ requires 8 < arr.length;
    //@ requires 8 <= arr.length;
    //@ requires 8 == arr.length;
    //@ requires 8 != arr.length;
    //@ requires 8 >= arr.length;
    //@ requires 8 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ non_null
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 9 < arr.length;
    //@ requires 9 <= arr.length;
    //@ requires 9 == arr.length;
    //@ requires 9 != arr.length;
    //@ requires 9 >= arr.length;
    //@ requires 9 > arr.length;
    //@ requires 8 < arr.length;
    //@ requires 8 <= arr.length;
    //@ requires 8 == arr.length;
    //@ requires 8 != arr.length;
    //@ requires 8 >= arr.length;
    //@ requires 8 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < 9;
    //@ requires j <= 9;
    //@ requires j == 9;
    //@ requires j != 9;
    //@ requires j >= 9;
    //@ requires j > 9;
    //@ requires j < 8;
    //@ requires j <= 8;
    //@ requires j == 8;
    //@ requires j != 8;
    //@ requires j >= 8;
    //@ requires j > 8;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        uniqueNum(arr);
        arr = new int[]{1};
        uniqueNum(arr);
        arr = new int[]{1, -2};
        uniqueNum(arr);
        arr = new int[]{1, 1};
        uniqueNum(arr);
        arr = new int[]{1, 2, -7};
        uniqueNum(arr);
        arr = new int[]{1, 1, 2};
        uniqueNum(arr);
        arr = new int[]{7, 1, 3};
        uniqueNum(arr);
        arr = new int[]{-8, 1, 0, 1};
        uniqueNum(arr);
        arr = new int[]{0, 1, 0, 1};
        uniqueNum(arr);
        arr = new int[]{114, 114, 514, 514, 1919, 1919, 810, 810};
        uniqueNum(arr);
        arr = new int[]{1919, 1919, 1919, 1919, 1919};
        uniqueNum(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        uniqueNum(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        uniqueNum(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        uniqueNum(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        uniqueNum(arr);
        arr = new int[]{9, 9, -23, 8, -23, 8, 3, 514, 514};
        uniqueNum(arr);
    }
    
}

/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:3: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:142: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:265: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
3 errors

public class UniqueNumNested {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 9 < arr.length;
    //@ requires 9 <= arr.length;
    //@ requires 9 == arr.length;
    //@ requires 9 != arr.length;
    //@ requires 9 >= arr.length;
    //@ requires 9 > arr.length;
    //@ requires 8 < arr.length;
    //@ requires 8 <= arr.length;
    //@ requires 8 == arr.length;
    //@ requires 8 != arr.length;
    //@ requires 8 >= arr.length;
    //@ requires 8 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < arr.length;
    //@ ensures \result <= arr.length;
    //@ ensures \result == arr.length;
    //@ ensures \result != arr.length;
    //@ ensures \result >= arr.length;
    //@ ensures \result > arr.length;
    //@ ensures \result < 9;
    //@ ensures \result <= 9;
    //@ ensures \result == 9;
    //@ ensures \result != 9;
    //@ ensures \result >= 9;
    //@ ensures \result > 9;
    //@ ensures \result < 8;
    //@ ensures \result <= 8;
    //@ ensures \result == 8;
    //@ ensures \result != 8;
    //@ ensures \result >= 8;
    //@ ensures \result > 8;
    //@ ensures \result < 7;
    //@ ensures \result <= 7;
    //@ ensures \result == 7;
    //@ ensures \result != 7;
    //@ ensures \result >= 7;
    //@ ensures \result > 7;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures arr == null ==> \result >= 0;
    //@ ensures arr != null ==> \result >= 0;
    public static int uniqueNum(int[] arr) {
        for (int i = 0; i < arr.length; ++i) {
            __Loop_Invariant_Dummy1(arr, i);
            int j = 0;
            while(j < arr.length) {
                __Loop_Invariant_Dummy2(arr, i, j);
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
        }
        return -1;
    }

    //@ non_null
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 9 < arr.length;
    //@ requires 9 <= arr.length;
    //@ requires 9 == arr.length;
    //@ requires 9 != arr.length;
    //@ requires 9 >= arr.length;
    //@ requires 9 > arr.length;
    //@ requires 8 < arr.length;
    //@ requires 8 <= arr.length;
    //@ requires 8 == arr.length;
    //@ requires 8 != arr.length;
    //@ requires 8 >= arr.length;
    //@ requires 8 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ non_null
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 9 < arr.length;
    //@ requires 9 <= arr.length;
    //@ requires 9 == arr.length;
    //@ requires 9 != arr.length;
    //@ requires 9 >= arr.length;
    //@ requires 9 > arr.length;
    //@ requires 8 < arr.length;
    //@ requires 8 <= arr.length;
    //@ requires 8 == arr.length;
    //@ requires 8 != arr.length;
    //@ requires 8 >= arr.length;
    //@ requires 8 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < 9;
    //@ requires j <= 9;
    //@ requires j == 9;
    //@ requires j != 9;
    //@ requires j >= 9;
    //@ requires j > 9;
    //@ requires j < 8;
    //@ requires j <= 8;
    //@ requires j == 8;
    //@ requires j != 8;
    //@ requires j >= 8;
    //@ requires j > 8;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        uniqueNum(arr);
        arr = new int[]{1};
        uniqueNum(arr);
        arr = new int[]{1, -2};
        uniqueNum(arr);
        arr = new int[]{1, 1};
        uniqueNum(arr);
        arr = new int[]{1, 2, -7};
        uniqueNum(arr);
        arr = new int[]{1, 1, 2};
        uniqueNum(arr);
        arr = new int[]{7, 1, 3};
        uniqueNum(arr);
        arr = new int[]{-8, 1, 0, 1};
        uniqueNum(arr);
        arr = new int[]{0, 1, 0, 1};
        uniqueNum(arr);
        arr = new int[]{114, 114, 514, 514, 1919, 1919, 810, 810};
        uniqueNum(arr);
        arr = new int[]{1919, 1919, 1919, 1919, 1919};
        uniqueNum(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        uniqueNum(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        uniqueNum(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        uniqueNum(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        uniqueNum(arr);
        arr = new int[]{9, 9, -23, 8, -23, 8, 3, 514, 514};
        uniqueNum(arr);
    }
    
}

/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:141: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:264: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
2 errors

public class UniqueNumNested {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 9 < arr.length;
    //@ requires 9 <= arr.length;
    //@ requires 9 == arr.length;
    //@ requires 9 != arr.length;
    //@ requires 9 >= arr.length;
    //@ requires 9 > arr.length;
    //@ requires 8 < arr.length;
    //@ requires 8 <= arr.length;
    //@ requires 8 == arr.length;
    //@ requires 8 != arr.length;
    //@ requires 8 >= arr.length;
    //@ requires 8 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < arr.length;
    //@ ensures \result <= arr.length;
    //@ ensures \result == arr.length;
    //@ ensures \result != arr.length;
    //@ ensures \result >= arr.length;
    //@ ensures \result > arr.length;
    //@ ensures \result < 9;
    //@ ensures \result <= 9;
    //@ ensures \result == 9;
    //@ ensures \result != 9;
    //@ ensures \result >= 9;
    //@ ensures \result > 9;
    //@ ensures \result < 8;
    //@ ensures \result <= 8;
    //@ ensures \result == 8;
    //@ ensures \result != 8;
    //@ ensures \result >= 8;
    //@ ensures \result > 8;
    //@ ensures \result < 7;
    //@ ensures \result <= 7;
    //@ ensures \result == 7;
    //@ ensures \result != 7;
    //@ ensures \result >= 7;
    //@ ensures \result > 7;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures arr == null ==> \result >= 0;
    //@ ensures arr != null ==> \result >= 0;
    public static int uniqueNum(int[] arr) {
        for (int i = 0; i < arr.length; ++i) {
            __Loop_Invariant_Dummy1(arr, i);
            int j = 0;
            while(j < arr.length) {
                __Loop_Invariant_Dummy2(arr, i, j);
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
        }
        return -1;
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 9 < arr.length;
    //@ requires 9 <= arr.length;
    //@ requires 9 == arr.length;
    //@ requires 9 != arr.length;
    //@ requires 9 >= arr.length;
    //@ requires 9 > arr.length;
    //@ requires 8 < arr.length;
    //@ requires 8 <= arr.length;
    //@ requires 8 == arr.length;
    //@ requires 8 != arr.length;
    //@ requires 8 >= arr.length;
    //@ requires 8 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ non_null
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 9 < arr.length;
    //@ requires 9 <= arr.length;
    //@ requires 9 == arr.length;
    //@ requires 9 != arr.length;
    //@ requires 9 >= arr.length;
    //@ requires 9 > arr.length;
    //@ requires 8 < arr.length;
    //@ requires 8 <= arr.length;
    //@ requires 8 == arr.length;
    //@ requires 8 != arr.length;
    //@ requires 8 >= arr.length;
    //@ requires 8 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < 9;
    //@ requires j <= 9;
    //@ requires j == 9;
    //@ requires j != 9;
    //@ requires j >= 9;
    //@ requires j > 9;
    //@ requires j < 8;
    //@ requires j <= 8;
    //@ requires j == 8;
    //@ requires j != 8;
    //@ requires j >= 8;
    //@ requires j > 8;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        uniqueNum(arr);
        arr = new int[]{1};
        uniqueNum(arr);
        arr = new int[]{1, -2};
        uniqueNum(arr);
        arr = new int[]{1, 1};
        uniqueNum(arr);
        arr = new int[]{1, 2, -7};
        uniqueNum(arr);
        arr = new int[]{1, 1, 2};
        uniqueNum(arr);
        arr = new int[]{7, 1, 3};
        uniqueNum(arr);
        arr = new int[]{-8, 1, 0, 1};
        uniqueNum(arr);
        arr = new int[]{0, 1, 0, 1};
        uniqueNum(arr);
        arr = new int[]{114, 114, 514, 514, 1919, 1919, 810, 810};
        uniqueNum(arr);
        arr = new int[]{1919, 1919, 1919, 1919, 1919};
        uniqueNum(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        uniqueNum(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        uniqueNum(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        uniqueNum(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        uniqueNum(arr);
        arr = new int[]{9, 9, -23, 8, -23, 8, 3, 514, 514};
        uniqueNum(arr);
    }
    
}

/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:263: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
1 error

public class UniqueNumNested {

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 9 < arr.length;
    //@ requires 9 <= arr.length;
    //@ requires 9 == arr.length;
    //@ requires 9 != arr.length;
    //@ requires 9 >= arr.length;
    //@ requires 9 > arr.length;
    //@ requires 8 < arr.length;
    //@ requires 8 <= arr.length;
    //@ requires 8 == arr.length;
    //@ requires 8 != arr.length;
    //@ requires 8 >= arr.length;
    //@ requires 8 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < arr.length;
    //@ ensures \result <= arr.length;
    //@ ensures \result == arr.length;
    //@ ensures \result != arr.length;
    //@ ensures \result >= arr.length;
    //@ ensures \result > arr.length;
    //@ ensures \result < 9;
    //@ ensures \result <= 9;
    //@ ensures \result == 9;
    //@ ensures \result != 9;
    //@ ensures \result >= 9;
    //@ ensures \result > 9;
    //@ ensures \result < 8;
    //@ ensures \result <= 8;
    //@ ensures \result == 8;
    //@ ensures \result != 8;
    //@ ensures \result >= 8;
    //@ ensures \result > 8;
    //@ ensures \result < 7;
    //@ ensures \result <= 7;
    //@ ensures \result == 7;
    //@ ensures \result != 7;
    //@ ensures \result >= 7;
    //@ ensures \result > 7;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures arr == null ==> \result >= 0;
    //@ ensures arr != null ==> \result >= 0;
    public static int uniqueNum(int[] arr) {
        for (int i = 0; i < arr.length; ++i) {
            __Loop_Invariant_Dummy1(arr, i);
            int j = 0;
            while(j < arr.length) {
                __Loop_Invariant_Dummy2(arr, i, j);
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
        }
        return -1;
    }

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 9 < arr.length;
    //@ requires 9 <= arr.length;
    //@ requires 9 == arr.length;
    //@ requires 9 != arr.length;
    //@ requires 9 >= arr.length;
    //@ requires 9 > arr.length;
    //@ requires 8 < arr.length;
    //@ requires 8 <= arr.length;
    //@ requires 8 == arr.length;
    //@ requires 8 != arr.length;
    //@ requires 8 >= arr.length;
    //@ requires 8 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int i) {}

    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires 9 < arr.length;
    //@ requires 9 <= arr.length;
    //@ requires 9 == arr.length;
    //@ requires 9 != arr.length;
    //@ requires 9 >= arr.length;
    //@ requires 9 > arr.length;
    //@ requires 8 < arr.length;
    //@ requires 8 <= arr.length;
    //@ requires 8 == arr.length;
    //@ requires 8 != arr.length;
    //@ requires 8 >= arr.length;
    //@ requires 8 > arr.length;
    //@ requires 7 < arr.length;
    //@ requires 7 <= arr.length;
    //@ requires 7 == arr.length;
    //@ requires 7 != arr.length;
    //@ requires 7 >= arr.length;
    //@ requires 7 > arr.length;
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 4 < arr.length;
    //@ requires 4 <= arr.length;
    //@ requires 4 == arr.length;
    //@ requires 4 != arr.length;
    //@ requires 4 >= arr.length;
    //@ requires 4 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < arr.length;
    //@ requires i <= arr.length;
    //@ requires i == arr.length;
    //@ requires i != arr.length;
    //@ requires i >= arr.length;
    //@ requires i > arr.length;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < arr.length;
    //@ requires j <= arr.length;
    //@ requires j == arr.length;
    //@ requires j != arr.length;
    //@ requires j >= arr.length;
    //@ requires j > arr.length;
    //@ requires j < 9;
    //@ requires j <= 9;
    //@ requires j == 9;
    //@ requires j != 9;
    //@ requires j >= 9;
    //@ requires j > 9;
    //@ requires j < 8;
    //@ requires j <= 8;
    //@ requires j == 8;
    //@ requires j != 8;
    //@ requires j >= 8;
    //@ requires j > 8;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < 3;
    //@ requires j <= 3;
    //@ requires j == 3;
    //@ requires j != 3;
    //@ requires j >= 3;
    //@ requires j > 3;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] arr, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        uniqueNum(arr);
        arr = new int[]{1};
        uniqueNum(arr);
        arr = new int[]{1, -2};
        uniqueNum(arr);
        arr = new int[]{1, 1};
        uniqueNum(arr);
        arr = new int[]{1, 2, -7};
        uniqueNum(arr);
        arr = new int[]{1, 1, 2};
        uniqueNum(arr);
        arr = new int[]{7, 1, 3};
        uniqueNum(arr);
        arr = new int[]{-8, 1, 0, 1};
        uniqueNum(arr);
        arr = new int[]{0, 1, 0, 1};
        uniqueNum(arr);
        arr = new int[]{114, 114, 514, 514, 1919, 1919, 810, 810};
        uniqueNum(arr);
        arr = new int[]{1919, 1919, 1919, 1919, 1919};
        uniqueNum(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        uniqueNum(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        uniqueNum(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        uniqueNum(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        uniqueNum(arr);
        arr = new int[]{9, 9, -23, 8, -23, 8, 3, 514, 514};
        uniqueNum(arr);
    }
    
}

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1888)
	at java.base/java.util.HashMap.putVal(HashMap.java:631)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:516)
	at java.base/java.util.HashMap.putAll(HashMap.java:785)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2$VarMap.putAll(BasicBlocker2.java:2513)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.initMap(BasicBlocker2.java:792)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.setCurrentBlock(BasicBlocker2.java:545)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.setCurrentBlock(BasicBlocker2.java:152)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.startBlock(BasicBlockerParent.java:463)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlock(BasicBlockerParent.java:404)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlocks(BasicBlockerParent.java:352)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.visitTry(BasicBlockerParent.java:1048)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCTry.accept(JCTree.java:1401)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processStats(BasicBlockerParent.java:426)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processCurrentBlock(BasicBlockerParent.java:418)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlock(BasicBlockerParent.java:405)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlocks(BasicBlockerParent.java:352)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.convertMethodBody(BasicBlocker2.java:617)
	at jdk.compiler/org.jmlspecs.openjml.esc.MethodProverSMT.prove(MethodProverSMT.java:361)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.doMethod(JmlEsc.java:329)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.visitMethodDef(JmlEsc.java:221)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.visitJmlMethodDecl(JmlTreeScanner.java:238)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodDecl.accept(JmlTree.java:1383)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.visitClassDef(JmlEsc.java:169)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.visitJmlClassDecl(JmlTreeScanner.java:106)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlClassDecl.accept(JmlTree.java:1295)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.check(JmlEsc.java:117)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.esc(JmlCompiler.java:536)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.flow(JmlCompiler.java:362)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:936)
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:458: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
    public static void main(String[] args) {
                       ^
  Reason: Prover aborted with exception: ZZZZZ
1 error

