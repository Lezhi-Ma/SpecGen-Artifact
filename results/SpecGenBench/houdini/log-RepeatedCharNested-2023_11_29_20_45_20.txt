public class RepeatedCharNested {

    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ non_null
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    //@ ensures s != null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ non_null
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ non_null
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:3: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:3: error: Embedded block comment must terminate within the JML line comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:4: error: illegal start of type
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:5: error: ';' expected
    //@ ensures \result < 1;
               ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:5: error: Token \result is not a type
    //@ ensures \result < 1;
                ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:5: error: ';' expected
    //@ ensures \result < 1;
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:5: error: <identifier> expected
    //@ ensures \result < 1;
                         ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:5: error: illegal start of type
    //@ ensures \result < 1;
                          ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:40: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:61: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:135: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:135: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:150: error: reached end of file while parsing
13 errors

public class RepeatedCharNested {

    //@ non_null
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    //@ ensures s != null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ non_null
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ non_null
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:3: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:39: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:60: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:134: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:134: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:149: error: reached end of file while parsing
6 errors

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    //@ ensures s != null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ non_null
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ non_null
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:38: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:59: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:133: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:133: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:148: error: reached end of file while parsing
5 errors

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    //@ ensures s != null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ non_null
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:58: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:132: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:132: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:147: error: reached end of file while parsing
4 errors

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    //@ ensures s != null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:131: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:131: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:146: error: reached end of file while parsing
3 errors

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    //@ ensures s != null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:35: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:5:) in method repeatedCharacter
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:35:
    //@ ensures \result == 1;
        ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    //@ ensures s != null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:34: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:6:) in method repeatedCharacter
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:34:
    //@ ensures \result >= 1;
        ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    //@ ensures s != null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:33: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:6:) in method repeatedCharacter
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:33:
    //@ ensures \result > 1;
        ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    //@ ensures s != null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:8:) in method repeatedCharacter
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:32:
    //@ ensures \result == 0;
        ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    //@ ensures s != null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:31: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:9:) in method repeatedCharacter
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:31:
    //@ ensures \result >= 0;
        ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    //@ ensures s != null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:9:) in method repeatedCharacter
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:30:
    //@ ensures \result > 0;
        ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    //@ ensures s != null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:29: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:9:) in method repeatedCharacter
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:29:
    //@ ensures \result < -1;
        ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    //@ ensures s != null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:11:) in method repeatedCharacter
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:28:
    //@ ensures \result != -1;
        ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    //@ ensures s != null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:12:) in method repeatedCharacter
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:27:
    //@ ensures \result > -1;
        ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    //@ ensures s != null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:14:) in method repeatedCharacter
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:26:
    //@ ensures s != null ==> \result >= 0;
        ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:46:) in method repeatedCharacter
            __Loop_Invariant_Dummy1(s, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16:
    public static void __Loop_Invariant_Dummy1(String s, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:28: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:45:) in method repeatedCharacter
            __Loop_Invariant_Dummy1(s, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16:
    public static void __Loop_Invariant_Dummy1(String s, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:28: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44:) in method repeatedCharacter
            __Loop_Invariant_Dummy1(s, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16:
    public static void __Loop_Invariant_Dummy1(String s, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:28: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:43:) in method repeatedCharacter
            __Loop_Invariant_Dummy1(s, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16:
    public static void __Loop_Invariant_Dummy1(String s, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:28: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:42:) in method repeatedCharacter
            __Loop_Invariant_Dummy1(s, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16:
    public static void __Loop_Invariant_Dummy1(String s, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:28: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:41:) in method repeatedCharacter
            __Loop_Invariant_Dummy1(s, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16:
    public static void __Loop_Invariant_Dummy1(String s, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:28: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:40:) in method repeatedCharacter
            __Loop_Invariant_Dummy1(s, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16:
    public static void __Loop_Invariant_Dummy1(String s, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:28: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:39:) in method repeatedCharacter
            __Loop_Invariant_Dummy1(s, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16:
    public static void __Loop_Invariant_Dummy1(String s, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:28: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:38:) in method repeatedCharacter
            __Loop_Invariant_Dummy1(s, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16:
    public static void __Loop_Invariant_Dummy1(String s, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:28: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:37:) in method repeatedCharacter
            __Loop_Invariant_Dummy1(s, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16:
    public static void __Loop_Invariant_Dummy1(String s, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:28: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:36:) in method repeatedCharacter
            __Loop_Invariant_Dummy1(s, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16:
    public static void __Loop_Invariant_Dummy1(String s, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:28: verify: Precondition conjunct is false: i >= 0
    //@ requires i >= 0;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:35:) in method repeatedCharacter
            __Loop_Invariant_Dummy1(s, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16:
    public static void __Loop_Invariant_Dummy1(String s, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:28: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:34:) in method repeatedCharacter
            __Loop_Invariant_Dummy1(s, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16:
    public static void __Loop_Invariant_Dummy1(String s, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:28: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:33:) in method repeatedCharacter
            __Loop_Invariant_Dummy1(s, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16:
    public static void __Loop_Invariant_Dummy1(String s, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:28: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:32:) in method repeatedCharacter
            __Loop_Invariant_Dummy1(s, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16:
    public static void __Loop_Invariant_Dummy1(String s, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:28: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:31:) in method repeatedCharacter
            __Loop_Invariant_Dummy1(s, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16:
    public static void __Loop_Invariant_Dummy1(String s, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:28: verify: Precondition conjunct is false: i != -1
    //@ requires i != -1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:30:) in method repeatedCharacter
            __Loop_Invariant_Dummy1(s, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16:
    public static void __Loop_Invariant_Dummy1(String s, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:28: verify: Precondition conjunct is false: i >= -1
    //@ requires i >= -1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:29:) in method repeatedCharacter
            __Loop_Invariant_Dummy1(s, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16:
    public static void __Loop_Invariant_Dummy1(String s, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:28: verify: Precondition conjunct is false: i > -1
    //@ requires i > -1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:102:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:32: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:101:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:33: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:100:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:33: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:99:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:33: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:98:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:35: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:97:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:36: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:96:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:36: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:95:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:36: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:94:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:36: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 < i;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:93:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:39: verify: Precondition conjunct is false: c1 < i
    //@ requires c1 < i;
                    ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 <= i;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:92:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:39: verify: Precondition conjunct is false: c1 <= i
    //@ requires c1 <= i;
                    ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 == i;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:91:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:39: verify: Precondition conjunct is false: c1 == i
    //@ requires c1 == i;
                    ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 != i;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:90:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:39: verify: Precondition conjunct is false: c1 != i
    //@ requires c1 != i;
                    ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 > i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:89:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:40: verify: Precondition conjunct is false: c1 > i
    //@ requires c1 > i;
                    ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 < 1;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:88:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:40: verify: Precondition conjunct is false: c1 < 1
    //@ requires c1 < 1;
                    ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 <= 1;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:87:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:40: verify: Precondition conjunct is false: c1 <= 1
    //@ requires c1 <= 1;
                    ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 == 1;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:86:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:40: verify: Precondition conjunct is false: c1 == 1
    //@ requires c1 == 1;
                    ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 != 1;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:85:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:40: verify: Precondition conjunct is false: c1 != 1
    //@ requires c1 != 1;
                    ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 1;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:84:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:40: verify: Precondition conjunct is false: c1 >= 1
    //@ requires c1 >= 1;
                    ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 > 1;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:83:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:40: verify: Precondition conjunct is false: c1 > 1
    //@ requires c1 > 1;
                    ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 < 0;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:82:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:40: verify: Precondition conjunct is false: c1 < 0
    //@ requires c1 < 0;
                    ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 <= 0;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:81:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:40: verify: Precondition conjunct is false: c1 <= 0
    //@ requires c1 <= 0;
                    ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 == 0;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:80:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:40: verify: Precondition conjunct is false: c1 == 0
    //@ requires c1 == 0;
                    ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 != 0;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:79:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:40: verify: Precondition conjunct is false: c1 != 0
    //@ requires c1 != 0;
                    ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 > 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:78:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:41: verify: Precondition conjunct is false: c1 > 0
    //@ requires c1 > 0;
                    ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 < -1;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:77:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:41: verify: Precondition conjunct is false: c1 < -1
    //@ requires c1 < -1;
                    ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 <= -1;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:76:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:41: verify: Precondition conjunct is false: c1 <= -1
    //@ requires c1 <= -1;
                    ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 == -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:75:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:41: verify: Precondition conjunct is false: c1 == -1
    //@ requires c1 == -1;
                    ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:74:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j < i
    //@ requires j < i;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:73:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j <= i
    //@ requires j <= i;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:72:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j == i
    //@ requires j == i;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:71:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j != i
    //@ requires j != i;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:70:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j >= i
    //@ requires j >= i;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j > i;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:69:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j > i
    //@ requires j > i;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < c1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:68:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j < c1
    //@ requires j < c1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j <= c1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:67:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j <= c1
    //@ requires j <= c1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j == c1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:66:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j == c1
    //@ requires j == c1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j != c1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:65:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j != c1
    //@ requires j != c1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j >= c1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:64:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j >= c1
    //@ requires j >= c1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j > c1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:63:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j > c1
    //@ requires j > c1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:62:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j < 1
    //@ requires j < 1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:61:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j <= 1
    //@ requires j <= 1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:60:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j == 1
    //@ requires j == 1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:59:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j != 1
    //@ requires j != 1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:58:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j >= 1
    //@ requires j >= 1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:57:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j > 1
    //@ requires j > 1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:56:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j < 0
    //@ requires j < 0;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:55:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j <= 0
    //@ requires j <= 0;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:54:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j == 0
    //@ requires j == 0;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:53:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j != 0
    //@ requires j != 0;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:52:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j >= 0
    //@ requires j >= 0;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:51:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j > 0
    //@ requires j > 0;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:50:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j < -1
    //@ requires j < -1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:49:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j <= -1
    //@ requires j <= -1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:48:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j == -1
    //@ requires j == -1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:47:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j != -1
    //@ requires j != -1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:46:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j >= -1
    //@ requires j >= -1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:45:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Precondition conjunct is false: j > -1
    //@ requires j > -1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:30: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:43:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:30: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:42:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:30: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:41:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:30: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:40:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:30: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= i;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:39:) in method repeatedCharacter
                __Loop_Invariant_Dummy2(s, i, c1, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:34: verify: Precondition conjunct is false: c1 >= i
    //@ requires c1 >= i;
                    ^
3 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:20: verify: The prover cannot establish an assertion (ExceptionalPostcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:12:) in method repeatedCharacter
                char c2 = s.charAt(j);
                                  ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:20:
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
        ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:6:) in method repeatedCharacter
                    return i;
                    ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:21:
    //@ ensures \result < 0;
        ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:7:) in method repeatedCharacter
                    return i;
                    ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:20:
    //@ ensures \result != 0;
        ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:11: verify: The prover cannot establish an assertion (InvariantExceptionExit: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method repeatedCharacter: RepeatedCharNested.repeatedCharacter(java.lang.String) (parameter s)
    public static int repeatedCharacter(String s) {
                                               ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:11:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires c1 >= 0;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:11: verify: The prover cannot establish an assertion (InvariantExceptionExit: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method repeatedCharacter: RepeatedCharNested.repeatedCharacter(java.lang.String) (parameter s)
    public static int repeatedCharacter(String s) {
                                               ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:11:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires c1 != -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:11: verify: The prover cannot establish an assertion (InvariantExceptionExit: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method repeatedCharacter: RepeatedCharNested.repeatedCharacter(java.lang.String) (parameter s)
    public static int repeatedCharacter(String s) {
                                               ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:11:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:7:) in method repeatedCharacter
                    return i;
                    ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    //@ ensures \result <= -1;
        ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:18: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:7:) in method repeatedCharacter
                    return i;
                    ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:18:
    //@ ensures \result == -1;
        ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result >= -1;
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:3:) in method repeatedCharacter
                    return i;
                    ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:17:
    //@ ensures \result < 1;
        ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result >= -1;
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:3:) in method repeatedCharacter
                    return i;
                    ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:16:
    //@ ensures \result <= 1;
        ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result >= -1;
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:15: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:3:) in method repeatedCharacter
                    return i;
                    ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:15:
    //@ ensures \result != 1;
        ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result <= 0;
    //@ ensures \result >= -1;
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:14: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:3:) in method repeatedCharacter
                    return i;
                    ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:14:
    //@ ensures \result <= 0;
        ^
2 verification failures

public class RepeatedCharNested {

    //@ ensures \result >= -1;
    //@ ensures s == null ==> \result >= 0;
    public static int repeatedCharacter(String s) {
        for (int i = 0; i < s.length(); ++i) {
            __Loop_Invariant_Dummy1(s, i);
            char c1 = s.charAt(i);
            for (int j = i + 1; j < s.length(); ++j) {
                __Loop_Invariant_Dummy2(s, i, c1, j);
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }

    public static void __Loop_Invariant_Dummy1(String s, int i) {}

    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires c1 >= -1;
    //@ requires c1 > -1;
    public static void __Loop_Invariant_Dummy2(String s, int i, char c1, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        repeatedCharacter("");
        repeatedCharacter("a");
        repeatedCharacter("aabb");
        repeatedCharacter("ab");
        repeatedCharacter("qabababc");
        repeatedCharacter("dagvwhfejrk");
        repeatedCharacter("dagvwhfejrkv");
        repeatedCharacter("eeeeer");
        repeatedCharacter("114514");
    }
    
}

/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:5: verify: The prover cannot establish an assertion (InvariantExceptionExit: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method repeatedCharacter: RepeatedCharNested.repeatedCharacter(java.lang.String) (parameter s)
    public static int repeatedCharacter(String s) {
                                               ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:5:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

