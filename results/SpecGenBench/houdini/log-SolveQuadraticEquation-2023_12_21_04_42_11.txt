import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a == 2;
    //@ requires a != 2;
    //@ requires a >= 2;
    //@ requires a > 2;
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 2;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b != 2;
    //@ requires b >= 2;
    //@ requires b > 2;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:151: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:135:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:135: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:151:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:6: verify: Precondition conjunct is false: a == 2
    //@ requires a == 2;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a >= 2;
    //@ requires a > 2;
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 2;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b != 2;
    //@ requires b >= 2;
    //@ requires b > 2;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:150: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:134:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:150:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:7: verify: Precondition conjunct is false: a >= 2
    //@ requires a >= 2;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a > 2;
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 2;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b != 2;
    //@ requires b >= 2;
    //@ requires b > 2;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:149: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:133:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:149:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:7: verify: Precondition conjunct is false: a > 2
    //@ requires a > 2;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 2;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b != 2;
    //@ requires b >= 2;
    //@ requires b > 2;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:148: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:132:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:132: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:148:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:7: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 2;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b != 2;
    //@ requires b >= 2;
    //@ requires b > 2;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:147: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:131:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:147:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:9: verify: Precondition conjunct is false: a != 1
    //@ requires a != 1;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 2;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b != 2;
    //@ requires b >= 2;
    //@ requires b > 2;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:146: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:130:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:146:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:10: verify: Precondition conjunct is false: a > 1
    //@ requires a > 1;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 2;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b != 2;
    //@ requires b >= 2;
    //@ requires b > 2;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:145: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:129:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:145:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:10: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 2;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b != 2;
    //@ requires b >= 2;
    //@ requires b > 2;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:144: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:128:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:144:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:10: verify: Precondition conjunct is false: a <= 0
    //@ requires a <= 0;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 2;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b != 2;
    //@ requires b >= 2;
    //@ requires b > 2;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:143: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:127:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:143:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:10: verify: Precondition conjunct is false: a == 0
    //@ requires a == 0;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 2;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b != 2;
    //@ requires b >= 2;
    //@ requires b > 2;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:142: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:126:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:142:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:13: verify: Precondition conjunct is false: a < -1
    //@ requires a < -1;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 2;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b != 2;
    //@ requires b >= 2;
    //@ requires b > 2;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:141: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:125:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:141:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:13: verify: Precondition conjunct is false: a <= -1
    //@ requires a <= -1;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 2;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b != 2;
    //@ requires b >= 2;
    //@ requires b > 2;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:140: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:124:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:140:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:13: verify: Precondition conjunct is false: a == -1
    //@ requires a == -1;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 2;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b != 2;
    //@ requires b >= 2;
    //@ requires b > 2;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:139: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:123:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:139:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:16: verify: Precondition conjunct is false: b < a
    //@ requires b < a;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 2;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b != 2;
    //@ requires b >= 2;
    //@ requires b > 2;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:138: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:122:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:138:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:16: verify: Precondition conjunct is false: b <= a
    //@ requires b <= a;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 2;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b != 2;
    //@ requires b >= 2;
    //@ requires b > 2;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:137: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:121:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:137:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:16: verify: Precondition conjunct is false: b == a
    //@ requires b == a;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 2;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b != 2;
    //@ requires b >= 2;
    //@ requires b > 2;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:136: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:120:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:136:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:19: verify: Precondition conjunct is false: b < 2
    //@ requires b < 2;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b != 2;
    //@ requires b >= 2;
    //@ requires b > 2;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:135: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:119:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:135:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:21: verify: Precondition conjunct is false: b != 2
    //@ requires b != 2;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b > 2;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:134: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:118:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:134:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:22: verify: Precondition conjunct is false: b > 2
    //@ requires b > 2;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:133: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:117:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:133:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:22: verify: Precondition conjunct is false: b < 1
    //@ requires b < 1;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:132: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:116:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:132:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:22: verify: Precondition conjunct is false: b <= 1
    //@ requires b <= 1;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:131: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:115:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:131:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:22: verify: Precondition conjunct is false: b == 1
    //@ requires b == 1;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:130: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:114:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:130:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:25: verify: Precondition conjunct is false: b < 0
    //@ requires b < 0;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:129: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:113:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:129:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:25: verify: Precondition conjunct is false: b <= 0
    //@ requires b <= 0;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:128: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:112:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:128:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:25: verify: Precondition conjunct is false: b == 0
    //@ requires b == 0;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:127: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:111:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:127:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:28: verify: Precondition conjunct is false: b < -1
    //@ requires b < -1;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:126: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:110:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:126:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:28: verify: Precondition conjunct is false: b <= -1
    //@ requires b <= -1;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:125: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:109:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:125:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:28: verify: Precondition conjunct is false: b == -1
    //@ requires b == -1;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c == b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:124: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:108:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:124:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:33: verify: Precondition conjunct is false: c == b
    //@ requires c == b;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c != b;
    //@ requires c >= b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:123: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:107:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:123:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:34: verify: Precondition conjunct is false: c >= b
    //@ requires c >= b;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c != b;
    //@ requires c > b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:122: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:106:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:122:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:34: verify: Precondition conjunct is false: c > b
    //@ requires c > b;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c != b;
    //@ requires c < a;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:121: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:105:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:121:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:34: verify: Precondition conjunct is false: c < a
    //@ requires c < a;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c != b;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c != a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:120: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:104:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:120:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:36: verify: Precondition conjunct is false: c != a
    //@ requires c != a;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c != b;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c >= a;
    //@ requires c > a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:119: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:103:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:119:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:37: verify: Precondition conjunct is false: c > a
    //@ requires c > a;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c != b;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c >= a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:118: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:102:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:118:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:39: verify: Precondition conjunct is false: c == 2
    //@ requires c == 2;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c != b;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c >= a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:117: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:101:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:117:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:40: verify: Precondition conjunct is false: c >= 2
    //@ requires c >= 2;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c != b;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c >= a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:116: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:100:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:116:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:40: verify: Precondition conjunct is false: c > 2
    //@ requires c > 2;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c != b;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c >= a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:115: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:99:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:115:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:40: verify: Precondition conjunct is false: c < 1
    //@ requires c < 1;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c != b;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c >= a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:114: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:98:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:114:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:42: verify: Precondition conjunct is false: c != 1
    //@ requires c != 1;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c != b;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c >= a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:113: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:97:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:113:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:43: verify: Precondition conjunct is false: c > 1
    //@ requires c > 1;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c != b;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c >= a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c >= 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:112: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:96:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:112:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:43: verify: Precondition conjunct is false: c < 0
    //@ requires c < 0;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c != b;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c >= a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c >= 1;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:111: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:95:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:111:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:43: verify: Precondition conjunct is false: c <= 0
    //@ requires c <= 0;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c != b;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c >= a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c >= 1;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:110: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:94:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:110:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:43: verify: Precondition conjunct is false: c == 0
    //@ requires c == 0;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c != b;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c >= a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c >= 1;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:109: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:93:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:109:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:46: verify: Precondition conjunct is false: c < -1
    //@ requires c < -1;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c != b;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c >= a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c >= 1;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:108: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:92:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:108:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:46: verify: Precondition conjunct is false: c <= -1
    //@ requires c <= -1;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c != b;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c >= a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c >= 1;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:107: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:91:) in method main
        solve(1, 2, 1);
             ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:107:
    public static double[] solve(int a, int b, int c) {
                           ^
/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:46: verify: Precondition conjunct is false: c == -1
    //@ requires c == -1;
                   ^
3 verification failures

import java.lang.Math;

public class SolveQuadraticEquation {
    //@ requires a < 2;
    //@ requires a <= 2;
    //@ requires a != 2;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a >= 1;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b <= 2;
    //@ requires b == 2;
    //@ requires b >= 2;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires c < b;
    //@ requires c <= b;
    //@ requires c != b;
    //@ requires c <= a;
    //@ requires c == a;
    //@ requires c >= a;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c >= 1;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ ensures \result != null;
    //@ ensures b < \result.length;
    //@ ensures b <= \result.length;
    //@ ensures b == \result.length;
    //@ ensures b != \result.length;
    //@ ensures b >= \result.length;
    //@ ensures b > \result.length;
    //@ ensures a < \result.length;
    //@ ensures a <= \result.length;
    //@ ensures a == \result.length;
    //@ ensures a != \result.length;
    //@ ensures a >= \result.length;
    //@ ensures a > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures c < \result.length;
    //@ ensures c <= \result.length;
    //@ ensures c == \result.length;
    //@ ensures c != \result.length;
    //@ ensures c >= \result.length;
    //@ ensures c > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures a >= 0 ==> \result != null;
    //@ ensures b >= 0 ==> \result != null;
    //@ ensures c >= 0 ==> \result != null;
    public static double[] solve(int a, int b, int c) {
        double[] res = new double[2];
        double delta = b * b - 4 * a * c;
        if(delta >= 0) {
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
            res[1] = 0;
        }
        else {
            res[0] = -b / (2*a);
            res[1] = Math.sqrt(-delta) / (2*a);
        }
        return res;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        solve(1, 2, 1);
        solve(-1, 0, 0);
        solve(1, 0, 0);
        solve(-1, 0, 1);
        solve(-1, -1, 1);
        solve(114, -514, 1919);
        solve(114, 514, 1919);
        solve(-114, 514, -1919);
    }
}


/home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:94: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/openjml/specs/java/lang/Math.jml:264:) in method solve
            res[0] = (-b - Math.sqrt(delta)) / (2 * a);
                                    ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/Math.jml:264: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SolveQuadraticEquation.java:94:
    public static /*@ pure @*/ double sqrt(double a);
                                      ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/Math.jml:247: verify: Precondition conjunct is false: Double.isNaN(a) || a < 0.0
      @   requires Double.isNaN(a) || a < 0.0;
                                   ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/Math.jml:250: verify: Precondition conjunct is false: a == Double.POSITIVE_INFINITY
      @   requires a == Double.POSITIVE_INFINITY;
                     ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/Math.jml:253: verify: Precondition conjunct is false: java.lang.Math.isPositiveZero(a)
      @   requires isPositiveZero(a);
                                 ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/Math.jml:256: verify: Precondition conjunct is false: java.lang.Math.isNegativeZero(a)
      @   requires isNegativeZero(a);
                                 ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/Math.jml:259: verify: Precondition conjunct is false: a > 0.0
      @   requires a > 0.0 && a < Double.POSITIVE_INFINITY;
                     ^
7 verification failures

