public class TransposeMatrix {

    //@ non_null
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ non_null
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ non_null
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ non_null
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ non_null
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:3: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:150: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:326: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:486: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:662: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
5 errors

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ non_null
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ non_null
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ non_null
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ non_null
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:149: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:325: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:485: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:661: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
4 errors

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ non_null
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ non_null
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ non_null
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:324: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:484: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:660: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
3 errors

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ non_null
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ non_null
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:483: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:659: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
2 errors

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ non_null
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:658: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
1 error

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:902: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:131:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:902:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:4: verify: Precondition conjunct is false: 6 < matrix.length
    //@ requires 6 < matrix.length;
                   ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:142: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_7524_7524___28 c_7524_7538___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:901: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:130:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:901:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:4: verify: Precondition conjunct is false: 6 <= matrix.length
    //@ requires 6 <= matrix.length;
                   ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:141: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_7488_7488___28 c_7488_7502___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:900: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:129:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:900:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:4: verify: Precondition conjunct is false: 6 == matrix.length
    //@ requires 6 == matrix.length;
                   ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:140: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_7451_7451___28 c_7451_7465___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:899: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:128:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:899:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:7: verify: Precondition conjunct is false: (\forall int houdiniTmp; ; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null)
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
                 ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:139: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_7414_7414___28 c_7414_7428___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:898: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:127:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:898:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:8: verify: Precondition conjunct is false: 5 < matrix.length
    //@ requires 5 < matrix.length;
                   ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:138: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_7305_7305___28 c_7305_7319___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:897: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:126:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:897:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:8: verify: Precondition conjunct is false: 5 <= matrix.length
    //@ requires 5 <= matrix.length;
                   ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:137: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_7269_7269___28 c_7269_7283___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:896: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:125:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:896:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:8: verify: Precondition conjunct is false: 5 == matrix.length
    //@ requires 5 == matrix.length;
                   ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:136: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_7232_7232___28 c_7232_7246___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:895: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:124:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:895:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:11: verify: Precondition conjunct is false: (\forall int houdiniTmp; ; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null)
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
                 ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:135: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_7195_7195___28 c_7195_7209___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:894: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:123:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:894:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:12: verify: Precondition conjunct is false: 4 < matrix.length
    //@ requires 4 < matrix.length;
                   ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:134: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_7086_7086___28 c_7086_7100___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:893: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:122:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:893:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:12: verify: Precondition conjunct is false: 4 <= matrix.length
    //@ requires 4 <= matrix.length;
                   ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:133: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_7050_7050___28 c_7050_7064___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:892: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:121:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:892:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:12: verify: Precondition conjunct is false: 4 == matrix.length
    //@ requires 4 == matrix.length;
                   ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:132: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_7013_7013___28 c_7013_7027___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:891: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:120:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:891:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:15: verify: Precondition conjunct is false: (\forall int houdiniTmp; ; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null)
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
                 ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:131: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_6976_6976___28 c_6976_6990___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:890: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:119:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:890:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:16: verify: Precondition conjunct is false: 3 < matrix.length
    //@ requires 3 < matrix.length;
                   ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:130: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_6867_6867___28 c_6867_6881___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:889: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:118:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:889:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:16: verify: Precondition conjunct is false: 3 <= matrix.length
    //@ requires 3 <= matrix.length;
                   ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:129: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_6831_6831___28 c_6831_6845___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:888: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:117:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:888:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:16: verify: Precondition conjunct is false: 3 == matrix.length
    //@ requires 3 == matrix.length;
                   ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:128: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_6794_6794___28 c_6794_6808___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:887: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:116:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:887:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:19: verify: Precondition conjunct is false: (\forall int houdiniTmp; ; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null)
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
                 ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:127: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_6757_6757___28 c_6757_6771___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:886: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:115:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:886:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:20: verify: Precondition conjunct is false: 2 < matrix.length
    //@ requires 2 < matrix.length;
                   ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:126: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_6648_6648___28 c_6648_6662___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:885: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:114:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:885:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:20: verify: Precondition conjunct is false: 2 <= matrix.length
    //@ requires 2 <= matrix.length;
                   ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:125: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_6612_6612___28 c_6612_6626___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:884: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:113:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:884:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:20: verify: Precondition conjunct is false: 2 == matrix.length
    //@ requires 2 == matrix.length;
                   ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:124: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_6575_6575___28 c_6575_6589___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:883: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:112:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:883:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:23: verify: Precondition conjunct is false: (\forall int houdiniTmp; ; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null)
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
                 ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:123: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_6538_6538___28 c_6538_6552___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:882: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:111:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:882:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:24: verify: Precondition conjunct is false: 1 < matrix.length
    //@ requires 1 < matrix.length;
                   ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:122: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_6429_6429___28 c_6429_6443___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:881: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:110:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:881:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:26: verify: Precondition conjunct is false: 1 != matrix.length
    //@ requires 1 != matrix.length;
                   ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:121: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_6393_6393___28 c_6393_6407___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:880: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:109:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:880:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:27: verify: Precondition conjunct is false: 1 > matrix.length
    //@ requires 1 > matrix.length;
                   ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:120: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_6356_6356___28 c_6356_6370___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:879: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:108:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:879:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:31: verify: Precondition conjunct is false: -1 == matrix.length
    //@ requires -1 == matrix.length;
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:119: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_6320_6320___28 c_6320_6334___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:878: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:107:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:878:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:32: verify: Precondition conjunct is false: -1 >= matrix.length
    //@ requires -1 >= matrix.length;
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:118: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_6282_6282___28 c_6282_6296___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:877: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:106:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:877:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:32: verify: Precondition conjunct is false: -1 > matrix.length
    //@ requires -1 > matrix.length;
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:117: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_6244_6244___28 c_6244_6258___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:876: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:105:) in method main
        transposeMat(matrix);
                    ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:876:
    public static int[][] transposeMat(int[][] matrix)
                          ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:33: verify: Precondition conjunct is false: (\forall int houdiniTmp; ; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null)
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
                 ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:116: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_6207_6207___28 c_6207_6221___31
1 error
3 verification failures

public class TransposeMatrix {

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ ensures \result != null;
    //@ ensures \result != null ==> \nonnullelements(\result);
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 6 < \result.length;
    //@ ensures 6 <= \result.length;
    //@ ensures 6 == \result.length;
    //@ ensures 6 != \result.length;
    //@ ensures 6 >= \result.length;
    //@ ensures 6 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures matrix.length < \result.length;
    //@ ensures matrix.length <= \result.length;
    //@ ensures matrix.length == \result.length;
    //@ ensures matrix.length != \result.length;
    //@ ensures matrix.length >= \result.length;
    //@ ensures matrix.length > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> \result[houdiniTmp] != null);
    //@ ensures (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < \result.length ==> \result[houdiniTmp] != null);
    //@ ensures \fresh(\result);
    //@ ensures matrix == null ==> \result != null;
    //@ ensures matrix == null ==> \nonnullelements(\result);
    //@ ensures matrix != null ==> \result != null;
    //@ ensures matrix != null ==> \nonnullelements(\result);
    public static int[][] transposeMat(int[][] matrix)
    {
        int m, n, p, q;
        m = matrix.length;
        n = matrix[0].length;
        int[][] transpose = new int[n][m];

        for (int c = 0; c < n; c++) {
            __Loop_Invariant_Dummy1(matrix, m, n, transpose, c);
            for (int d = 0; d < m; d++) {
                __Loop_Invariant_Dummy2(matrix, m, n, transpose, c, d);
                transpose[c][d] = matrix[d][c];
            }

        }
        return transpose;
    }

    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    public static void __Loop_Invariant_Dummy1(int[][] matrix, int m, int n, int[][] transpose, int c) {}
    
    //@ requires matrix != null ==> \nonnullelements(matrix);
    //@ requires 6 < matrix.length;
    //@ requires 6 <= matrix.length;
    //@ requires 6 == matrix.length;
    //@ requires 6 != matrix.length;
    //@ requires 6 >= matrix.length;
    //@ requires 6 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 5 < matrix.length;
    //@ requires 5 <= matrix.length;
    //@ requires 5 == matrix.length;
    //@ requires 5 != matrix.length;
    //@ requires 5 >= matrix.length;
    //@ requires 5 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 4 < matrix.length;
    //@ requires 4 <= matrix.length;
    //@ requires 4 == matrix.length;
    //@ requires 4 != matrix.length;
    //@ requires 4 >= matrix.length;
    //@ requires 4 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 3 < matrix.length;
    //@ requires 3 <= matrix.length;
    //@ requires 3 == matrix.length;
    //@ requires 3 != matrix.length;
    //@ requires 3 >= matrix.length;
    //@ requires 3 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 2 < matrix.length;
    //@ requires 2 <= matrix.length;
    //@ requires 2 == matrix.length;
    //@ requires 2 != matrix.length;
    //@ requires 2 >= matrix.length;
    //@ requires 2 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires 1 < matrix.length;
    //@ requires 1 <= matrix.length;
    //@ requires 1 == matrix.length;
    //@ requires 1 != matrix.length;
    //@ requires 1 >= matrix.length;
    //@ requires 1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires -1 < matrix.length;
    //@ requires -1 <= matrix.length;
    //@ requires -1 == matrix.length;
    //@ requires -1 != matrix.length;
    //@ requires -1 >= matrix.length;
    //@ requires -1 > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires m < 6;
    //@ requires m <= 6;
    //@ requires m == 6;
    //@ requires m != 6;
    //@ requires m >= 6;
    //@ requires m > 6;
    //@ requires m < 5;
    //@ requires m <= 5;
    //@ requires m == 5;
    //@ requires m != 5;
    //@ requires m >= 5;
    //@ requires m > 5;
    //@ requires m < 4;
    //@ requires m <= 4;
    //@ requires m == 4;
    //@ requires m != 4;
    //@ requires m >= 4;
    //@ requires m > 4;
    //@ requires m < matrix.length;
    //@ requires m <= matrix.length;
    //@ requires m == matrix.length;
    //@ requires m != matrix.length;
    //@ requires m >= matrix.length;
    //@ requires m > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires m < 3;
    //@ requires m <= 3;
    //@ requires m == 3;
    //@ requires m != 3;
    //@ requires m >= 3;
    //@ requires m > 3;
    //@ requires m < 2;
    //@ requires m <= 2;
    //@ requires m == 2;
    //@ requires m != 2;
    //@ requires m >= 2;
    //@ requires m > 2;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < matrix.length;
    //@ requires n <= matrix.length;
    //@ requires n == matrix.length;
    //@ requires n != matrix.length;
    //@ requires n >= matrix.length;
    //@ requires n > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires transpose != null ==> \nonnullelements(transpose);
    //@ requires n < transpose.length;
    //@ requires n <= transpose.length;
    //@ requires n == transpose.length;
    //@ requires n != transpose.length;
    //@ requires n >= transpose.length;
    //@ requires n > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < n ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; n <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires -1 < transpose.length;
    //@ requires -1 <= transpose.length;
    //@ requires -1 == transpose.length;
    //@ requires -1 != transpose.length;
    //@ requires -1 >= transpose.length;
    //@ requires -1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < -1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; -1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires m < transpose.length;
    //@ requires m <= transpose.length;
    //@ requires m == transpose.length;
    //@ requires m != transpose.length;
    //@ requires m >= transpose.length;
    //@ requires m > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < m ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; m <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 6 < transpose.length;
    //@ requires 6 <= transpose.length;
    //@ requires 6 == transpose.length;
    //@ requires 6 != transpose.length;
    //@ requires 6 >= transpose.length;
    //@ requires 6 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 6 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 6 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 5 < transpose.length;
    //@ requires 5 <= transpose.length;
    //@ requires 5 == transpose.length;
    //@ requires 5 != transpose.length;
    //@ requires 5 >= transpose.length;
    //@ requires 5 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 5 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 5 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 4 < transpose.length;
    //@ requires 4 <= transpose.length;
    //@ requires 4 == transpose.length;
    //@ requires 4 != transpose.length;
    //@ requires 4 >= transpose.length;
    //@ requires 4 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 4 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 4 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires matrix.length < transpose.length;
    //@ requires matrix.length <= transpose.length;
    //@ requires matrix.length == transpose.length;
    //@ requires matrix.length != transpose.length;
    //@ requires matrix.length >= transpose.length;
    //@ requires matrix.length > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < matrix.length ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; matrix.length <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 3 < transpose.length;
    //@ requires 3 <= transpose.length;
    //@ requires 3 == transpose.length;
    //@ requires 3 != transpose.length;
    //@ requires 3 >= transpose.length;
    //@ requires 3 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 3 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 3 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 2 < transpose.length;
    //@ requires 2 <= transpose.length;
    //@ requires 2 == transpose.length;
    //@ requires 2 != transpose.length;
    //@ requires 2 >= transpose.length;
    //@ requires 2 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 2 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 2 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires 1 < transpose.length;
    //@ requires 1 <= transpose.length;
    //@ requires 1 == transpose.length;
    //@ requires 1 != transpose.length;
    //@ requires 1 >= transpose.length;
    //@ requires 1 > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < 1 ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; 1 <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < n;
    //@ requires c <= n;
    //@ requires c == n;
    //@ requires c != n;
    //@ requires c >= n;
    //@ requires c > n;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < m;
    //@ requires c <= m;
    //@ requires c == m;
    //@ requires c != m;
    //@ requires c >= m;
    //@ requires c > m;
    //@ requires c < transpose.length;
    //@ requires c <= transpose.length;
    //@ requires c == transpose.length;
    //@ requires c != transpose.length;
    //@ requires c >= transpose.length;
    //@ requires c > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires c < 6;
    //@ requires c <= 6;
    //@ requires c == 6;
    //@ requires c != 6;
    //@ requires c >= 6;
    //@ requires c > 6;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 4;
    //@ requires c <= 4;
    //@ requires c == 4;
    //@ requires c != 4;
    //@ requires c >= 4;
    //@ requires c > 4;
    //@ requires c < matrix.length;
    //@ requires c <= matrix.length;
    //@ requires c == matrix.length;
    //@ requires c != matrix.length;
    //@ requires c >= matrix.length;
    //@ requires c > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < c ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; c <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires d < n;
    //@ requires d <= n;
    //@ requires d == n;
    //@ requires d != n;
    //@ requires d >= n;
    //@ requires d > n;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    //@ requires d < m;
    //@ requires d <= m;
    //@ requires d == m;
    //@ requires d != m;
    //@ requires d >= m;
    //@ requires d > m;
    //@ requires d < transpose.length;
    //@ requires d <= transpose.length;
    //@ requires d == transpose.length;
    //@ requires d != transpose.length;
    //@ requires d >= transpose.length;
    //@ requires d > transpose.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> transpose[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < transpose.length ==> transpose[houdiniTmp] != null);
    //@ requires d < 6;
    //@ requires d <= 6;
    //@ requires d == 6;
    //@ requires d != 6;
    //@ requires d >= 6;
    //@ requires d > 6;
    //@ requires d < c;
    //@ requires d <= c;
    //@ requires d == c;
    //@ requires d != c;
    //@ requires d >= c;
    //@ requires d > c;
    //@ requires d < 5;
    //@ requires d <= 5;
    //@ requires d == 5;
    //@ requires d != 5;
    //@ requires d >= 5;
    //@ requires d > 5;
    //@ requires d < 4;
    //@ requires d <= 4;
    //@ requires d == 4;
    //@ requires d != 4;
    //@ requires d >= 4;
    //@ requires d > 4;
    //@ requires d < matrix.length;
    //@ requires d <= matrix.length;
    //@ requires d == matrix.length;
    //@ requires d != matrix.length;
    //@ requires d >= matrix.length;
    //@ requires d > matrix.length;
    //@ requires (\forall int houdiniTmp; 0 <= houdiniTmp && houdiniTmp < d ==> matrix[houdiniTmp] != null);
    //@ requires (\forall int houdiniTmp; d <= houdiniTmp && houdiniTmp < matrix.length ==> matrix[houdiniTmp] != null);
    //@ requires d < 3;
    //@ requires d <= 3;
    //@ requires d == 3;
    //@ requires d != 3;
    //@ requires d >= 3;
    //@ requires d > 3;
    //@ requires d < 2;
    //@ requires d <= 2;
    //@ requires d == 2;
    //@ requires d != 2;
    //@ requires d >= 2;
    //@ requires d > 2;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    public static void __Loop_Invariant_Dummy2(int[][] matrix, int m, int n, int[][] transpose, int c, int d) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[][] matrix = new int[][] {{}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
        transposeMat(matrix);
        matrix = new int[][] {{1}, {2, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{114, 514}, {1919, 810}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1}, {0, 1, 0}, {2, 3, 3}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}};
        transposeMat(matrix);
        matrix = new int[][] {{1, 0, 1, 0}, {19, 19, 8, 10}, {11, 4, 51, 4}, {0, 0, 0, 0}, {1, 2, 3, 4}};
        transposeMat(matrix);
    }
}




/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:115: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                transpose[c][d] = matrix[d][c];
                          ^
  Reason: Double rewriting of ident: c c_6085_6085___28 c_6085_6099___31
1 error

