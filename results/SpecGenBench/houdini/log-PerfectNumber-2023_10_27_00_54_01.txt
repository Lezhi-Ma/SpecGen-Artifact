class PerfectNumber {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:117: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:24:) in method __HoudiniInvoker
        isPerfectNumber(-2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:117:
    public static boolean isPerfectNumber(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:4: verify: Precondition conjunct is false: num == 1
    //@ requires num == 1;
                     ^
3 verification failures

class PerfectNumber {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:116: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:23:) in method __HoudiniInvoker
        isPerfectNumber(-2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:116:
    public static boolean isPerfectNumber(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:5: verify: Precondition conjunct is false: num >= 1
    //@ requires num >= 1;
                     ^
3 verification failures

class PerfectNumber {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:115: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:22:) in method __HoudiniInvoker
        isPerfectNumber(-2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:115:
    public static boolean isPerfectNumber(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:5: verify: Precondition conjunct is false: num > 1
    //@ requires num > 1;
                     ^
3 verification failures

class PerfectNumber {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:114: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:21:) in method __HoudiniInvoker
        isPerfectNumber(-2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:114:
    public static boolean isPerfectNumber(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:7: verify: Precondition conjunct is false: num == 0
    //@ requires num == 0;
                     ^
3 verification failures

class PerfectNumber {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:113: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:20:) in method __HoudiniInvoker
        isPerfectNumber(-2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:113:
    public static boolean isPerfectNumber(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:8: verify: Precondition conjunct is false: num >= 0
    //@ requires num >= 0;
                     ^
3 verification failures

class PerfectNumber {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:112: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:19:) in method __HoudiniInvoker
        isPerfectNumber(-2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:112:
    public static boolean isPerfectNumber(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:8: verify: Precondition conjunct is false: num > 0
    //@ requires num > 0;
                     ^
3 verification failures

class PerfectNumber {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:111: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:18:) in method __HoudiniInvoker
        isPerfectNumber(-2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:111:
    public static boolean isPerfectNumber(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:10: verify: Precondition conjunct is false: num == -1
    //@ requires num == -1;
                     ^
3 verification failures

class PerfectNumber {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:110: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:17:) in method __HoudiniInvoker
        isPerfectNumber(-2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:110:
    public static boolean isPerfectNumber(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:11: verify: Precondition conjunct is false: num >= -1
    //@ requires num >= -1;
                     ^
3 verification failures

class PerfectNumber {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ requires num > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:109: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:16:) in method __HoudiniInvoker
        isPerfectNumber(-2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:109:
    public static boolean isPerfectNumber(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:11: verify: Precondition conjunct is false: num > -1
    //@ requires num > -1;
                     ^
3 verification failures

class PerfectNumber {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:11:) in method isPerfectNumber
            return false;
            ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:17:
    //@ ensures \result;
        ^
2 verification failures

class PerfectNumber {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:108: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:14:) in method __HoudiniInvoker
        isPerfectNumber(-1);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:108:
    public static boolean isPerfectNumber(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:8: verify: Precondition conjunct is false: num < -1
    //@ requires num < -1;
                     ^
3 verification failures

class PerfectNumber {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:107: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:13:) in method __HoudiniInvoker
        isPerfectNumber(-1);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:107:
    public static boolean isPerfectNumber(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: Precondition conjunct is false: num != -1
    //@ requires num != -1;
                     ^
3 verification failures

class PerfectNumber {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num <= -1;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:107: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:12:) in method __HoudiniInvoker
        isPerfectNumber(0);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:107:
    public static boolean isPerfectNumber(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:5: verify: Precondition conjunct is false: num < 0
    //@ requires num < 0;
                     ^
3 verification failures

class PerfectNumber {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num <= -1;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:106: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:11:) in method __HoudiniInvoker
        isPerfectNumber(0);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:106:
    public static boolean isPerfectNumber(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:6: verify: Precondition conjunct is false: num != 0
    //@ requires num != 0;
                     ^
3 verification failures

class PerfectNumber {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    //@ requires num <= -1;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:105: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:10:) in method __HoudiniInvoker
        isPerfectNumber(0);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:105:
    public static boolean isPerfectNumber(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:6: verify: Precondition conjunct is false: num <= -1
    //@ requires num <= -1;
                     ^
3 verification failures

class PerfectNumber {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> \result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:11: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:7:) in method isPerfectNumber
            return false;
            ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:11:
    //@ ensures num >= 0 ==> \result;
        ^
2 verification failures

class PerfectNumber {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:104: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:8:) in method __HoudiniInvoker
        isPerfectNumber(1);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:104:
    public static boolean isPerfectNumber(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:2: verify: Precondition conjunct is false: num < 1
    //@ requires num < 1;
                     ^
3 verification failures

class PerfectNumber {
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:103: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:7:) in method __HoudiniInvoker
        isPerfectNumber(1);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:103:
    public static boolean isPerfectNumber(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:3: verify: Precondition conjunct is false: num != 1
    //@ requires num != 1;
                     ^
3 verification failures

class PerfectNumber {
    //@ requires num <= 1;
    //@ requires num <= 0;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:102: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:6:) in method __HoudiniInvoker
        isPerfectNumber(1);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:102:
    public static boolean isPerfectNumber(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:3: verify: Precondition conjunct is false: num <= 0
    //@ requires num <= 0;
                     ^
3 verification failures

class PerfectNumber {
    //@ requires num <= 1;
    //@ ensures !\result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:102: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:5:) in method __HoudiniInvoker
        isPerfectNumber(2);
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:102:
    public static boolean isPerfectNumber(int num) {
                          ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
3 verification failures

class PerfectNumber {
    //@ ensures !\result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:94:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:11:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:22: verify: Precondition conjunct is false: num < 1
    //@ requires num < 1;
                     ^
3 verification failures

class PerfectNumber {
    //@ ensures !\result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:93:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:11:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:22: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
3 verification failures

class PerfectNumber {
    //@ ensures !\result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:92:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:11:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:22: verify: Precondition conjunct is false: num == 1
    //@ requires num == 1;
                     ^
3 verification failures

class PerfectNumber {
    //@ ensures !\result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:91:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:11:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:25: verify: Precondition conjunct is false: num < 0
    //@ requires num < 0;
                     ^
3 verification failures

class PerfectNumber {
    //@ ensures !\result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:90:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:11:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:25: verify: Precondition conjunct is false: num <= 0
    //@ requires num <= 0;
                     ^
3 verification failures

class PerfectNumber {
    //@ ensures !\result;
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:2:) in method isPerfectNumber
        return sum == num;
        ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:19:
    //@ ensures !\result;
        ^
2 verification failures

class PerfectNumber {
    //@ ensures num >= 0 ==> !\result;
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:18: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:2:) in method isPerfectNumber
        return sum == num;
        ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:18:
    //@ ensures num >= 0 ==> !\result;
        ^
2 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:87:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:23: verify: Precondition conjunct is false: num == 0
    //@ requires num == 0;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:86:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:26: verify: Precondition conjunct is false: num < -1
    //@ requires num < -1;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:85:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:26: verify: Precondition conjunct is false: num <= -1
    //@ requires num <= -1;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:84:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:26: verify: Precondition conjunct is false: num == -1
    //@ requires num == -1;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:83:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:31: verify: Precondition conjunct is false: sum == num
    //@ requires sum == num;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:82:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:32: verify: Precondition conjunct is false: sum >= num
    //@ requires sum >= num;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:81:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:32: verify: Precondition conjunct is false: sum > num
    //@ requires sum > num;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:80:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:34: verify: Precondition conjunct is false: sum == 1
    //@ requires sum == 1;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:79:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:35: verify: Precondition conjunct is false: sum >= 1
    //@ requires sum >= 1;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:78:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:35: verify: Precondition conjunct is false: sum > 1
    //@ requires sum > 1;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:77:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:29: verify: Precondition conjunct is false: sum < num
    //@ requires sum < num;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:76:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:36: verify: Precondition conjunct is false: sum == 0
    //@ requires sum == 0;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:75:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:31: verify: Precondition conjunct is false: sum < 1
    //@ requires sum < 1;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:74:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:36: verify: Precondition conjunct is false: sum >= 0
    //@ requires sum >= 0;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:73:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:36: verify: Precondition conjunct is false: sum > 0
    //@ requires sum > 0;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:72:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:32: verify: Precondition conjunct is false: sum != 1
    //@ requires sum != 1;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum <= 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:71:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:29: verify: Precondition conjunct is false: sum <= num
    //@ requires sum <= num;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum != num;
    //@ requires sum <= 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:70:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:36: verify: Precondition conjunct is false: sum == -1
    //@ requires sum == -1;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum != num;
    //@ requires sum <= 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:69:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:37: verify: Precondition conjunct is false: sum >= -1
    //@ requires sum >= -1;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum != num;
    //@ requires sum <= 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:68:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:37: verify: Precondition conjunct is false: sum > -1
    //@ requires sum > -1;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum != num;
    //@ requires sum <= 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d == num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:67:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:39: verify: Precondition conjunct is false: d == num
    //@ requires d == num;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum != num;
    //@ requires sum <= 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d >= num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:66:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:40: verify: Precondition conjunct is false: d >= num
    //@ requires d >= num;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum != num;
    //@ requires sum <= 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:65:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:31: verify: Precondition conjunct is false: sum < 0
    //@ requires sum < 0;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum != num;
    //@ requires sum <= 1;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d > num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:64:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:39: verify: Precondition conjunct is false: d > num
    //@ requires d > num;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum != num;
    //@ requires sum <= 1;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:63:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:30: verify: Precondition conjunct is false: sum <= 1
    //@ requires sum <= 1;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum != num;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d < sum;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:62:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:38: verify: Precondition conjunct is false: d < sum
    //@ requires d < sum;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum != num;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:61:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:31: verify: Precondition conjunct is false: sum != 0
    //@ requires sum != 0;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum != num;
    //@ requires sum <= 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:60:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:31: verify: Precondition conjunct is false: sum < -1
    //@ requires sum < -1;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum != num;
    //@ requires sum <= 0;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d != sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:59:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:38: verify: Precondition conjunct is false: d != sum
    //@ requires d != sum;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum != num;
    //@ requires sum <= 0;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:58:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:32: verify: Precondition conjunct is false: sum != -1
    //@ requires sum != -1;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum != num;
    //@ requires sum <= 0;
    //@ requires sum <= -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:57:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:31: verify: Precondition conjunct is false: sum <= -1
    //@ requires sum <= -1;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum != num;
    //@ requires sum <= 0;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d <= sum;
    //@ requires d == sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:56:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:34: verify: Precondition conjunct is false: d <= sum
    //@ requires d <= sum;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum != num;
    //@ requires sum <= 0;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d == sum;
    //@ requires d >= sum;
    //@ requires d > sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:55:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:36: verify: Precondition conjunct is false: d > sum
    //@ requires d > sum;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum != num;
    //@ requires sum <= 0;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d == sum;
    //@ requires d >= sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:54:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:34: verify: Precondition conjunct is false: d == sum
    //@ requires d == sum;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum != num;
    //@ requires sum <= 0;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d >= sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:53:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:29: verify: Precondition conjunct is false: sum != num
    //@ requires sum != num;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum <= 0;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d >= sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d == 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:52:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:36: verify: Precondition conjunct is false: d == 1
    //@ requires d == 1;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum <= 0;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d >= sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d != 1;
    //@ requires d >= 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:51:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:37: verify: Precondition conjunct is false: d >= 1
    //@ requires d >= 1;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum <= 0;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d >= sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d != 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:50:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:29: verify: Precondition conjunct is false: sum <= 0
    //@ requires sum <= 0;
                     ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d >= sum;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d != 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:49:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:32: verify: Precondition conjunct is false: d >= sum
    //@ requires d >= sum;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d != 1;
    //@ requires d > 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:48:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:35: verify: Precondition conjunct is false: d > 1
    //@ requires d > 1;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d != 1;
    //@ requires d < 0;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:47:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:35: verify: Precondition conjunct is false: d < 0
    //@ requires d < 0;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d < 1;
    //@ requires d <= 1;
    //@ requires d != 1;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:46:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:32: verify: Precondition conjunct is false: d < 1
    //@ requires d < 1;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d <= 1;
    //@ requires d != 1;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d != 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:45:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:36: verify: Precondition conjunct is false: d != 0
    //@ requires d != 0;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d <= 1;
    //@ requires d != 1;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:44:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:32: verify: Precondition conjunct is false: d <= 1
    //@ requires d <= 1;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d != 1;
    //@ requires d <= 0;
    //@ requires d == 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:43:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:33: verify: Precondition conjunct is false: d <= 0
    //@ requires d <= 0;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d != 1;
    //@ requires d == 0;
    //@ requires d >= 0;
    //@ requires d > 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:42:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:35: verify: Precondition conjunct is false: d > 0
    //@ requires d > 0;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d != 1;
    //@ requires d == 0;
    //@ requires d >= 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:41:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:33: verify: Precondition conjunct is false: d == 0
    //@ requires d == 0;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d != 1;
    //@ requires d >= 0;
    //@ requires d < -1;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:40:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:34: verify: Precondition conjunct is false: d < -1
    //@ requires d < -1;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d != 1;
    //@ requires d >= 0;
    //@ requires d <= -1;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:39:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:34: verify: Precondition conjunct is false: d <= -1
    //@ requires d <= -1;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d != 1;
    //@ requires d >= 0;
    //@ requires d == -1;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:38:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:34: verify: Precondition conjunct is false: d == -1
    //@ requires d == -1;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d != 1;
    //@ requires d >= 0;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:37:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:32: verify: Precondition conjunct is false: d != 1
    //@ requires d != 1;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d >= 0;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:36:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:32: verify: Precondition conjunct is false: d >= 0
    //@ requires d >= 0;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d != -1;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:35:) in method isPerfectNumber
            __Loop_Invariant_Dummy1(num, sum, d);
                                   ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectNumber.java:9:
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:32: verify: Precondition conjunct is false: d != -1
    //@ requires d != -1;
                   ^
3 verification failures

class PerfectNumber {
    public static boolean isPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }

        int sum = 1;
        for (int d = 2; d * d <= num; ++d) {
            __Loop_Invariant_Dummy1(num, sum, d);
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }

    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires d < num;
    //@ requires d <= num;
    //@ requires d != num;
    //@ requires d >= -1;
    //@ requires d > -1;
    public static void __Loop_Invariant_Dummy1(int num, int sum, int d) {}

    public static void __HoudiniInvoker() {
        isPerfectNumber(-2);
        isPerfectNumber(-1);
        isPerfectNumber(0);
        isPerfectNumber(1);
        isPerfectNumber(2);
        isPerfectNumber(3);
        isPerfectNumber(4);
        isPerfectNumber(16);
    }
}


/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:10: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method isPerfectNumber
            if (num % d == 0) {
                    ^
1 verification failure

