class PrimeCheck {
   
	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ ensures \result;
	//@ ensures !\result;
	//@ ensures a >= 0 ==> \result;
	//@ ensures a >= 0 ==> !\result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:113: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:25:) in method __HoudiniInvoker
        isPrime(0);
               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:113:
	public boolean isPrime(int a) {
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:5: verify: Precondition conjunct is false: a == 1
	//@ requires a == 1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ ensures \result;
	//@ ensures !\result;
	//@ ensures a >= 0 ==> \result;
	//@ ensures a >= 0 ==> !\result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:112: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:24:) in method __HoudiniInvoker
        isPrime(0);
               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:112:
	public boolean isPrime(int a) {
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:6: verify: Precondition conjunct is false: a >= 1
	//@ requires a >= 1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ ensures \result;
	//@ ensures !\result;
	//@ ensures a >= 0 ==> \result;
	//@ ensures a >= 0 ==> !\result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:111: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:23:) in method __HoudiniInvoker
        isPrime(0);
               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:111:
	public boolean isPrime(int a) {
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:6: verify: Precondition conjunct is false: a > 1
	//@ requires a > 1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ ensures \result;
	//@ ensures !\result;
	//@ ensures a >= 0 ==> \result;
	//@ ensures a >= 0 ==> !\result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:110: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:22:) in method __HoudiniInvoker
        isPrime(0);
               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:110:
	public boolean isPrime(int a) {
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:6: verify: Precondition conjunct is false: a < 0
	//@ requires a < 0;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ ensures \result;
	//@ ensures !\result;
	//@ ensures a >= 0 ==> \result;
	//@ ensures a >= 0 ==> !\result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:109: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:21:) in method __HoudiniInvoker
        isPrime(0);
               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:109:
	public boolean isPrime(int a) {
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:8: verify: Precondition conjunct is false: a != 0
	//@ requires a != 0;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ ensures \result;
	//@ ensures !\result;
	//@ ensures a >= 0 ==> \result;
	//@ ensures a >= 0 ==> !\result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:108: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:20:) in method __HoudiniInvoker
        isPrime(0);
               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:108:
	public boolean isPrime(int a) {
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:9: verify: Precondition conjunct is false: a > 0
	//@ requires a > 0;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a >= 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ ensures \result;
	//@ ensures !\result;
	//@ ensures a >= 0 ==> \result;
	//@ ensures a >= 0 ==> !\result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:107: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:19:) in method __HoudiniInvoker
        isPrime(0);
               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:107:
	public boolean isPrime(int a) {
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:9: verify: Precondition conjunct is false: a < -1
	//@ requires a < -1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a >= 0;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ ensures \result;
	//@ ensures !\result;
	//@ ensures a >= 0 ==> \result;
	//@ ensures a >= 0 ==> !\result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:106: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:18:) in method __HoudiniInvoker
        isPrime(0);
               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:106:
	public boolean isPrime(int a) {
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:9: verify: Precondition conjunct is false: a <= -1
	//@ requires a <= -1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a >= 0;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ ensures \result;
	//@ ensures !\result;
	//@ ensures a >= 0 ==> \result;
	//@ ensures a >= 0 ==> !\result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:105: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:17:) in method __HoudiniInvoker
        isPrime(0);
               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:105:
	public boolean isPrime(int a) {
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:9: verify: Precondition conjunct is false: a == -1
	//@ requires a == -1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a >= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ ensures \result;
	//@ ensures !\result;
	//@ ensures a >= 0 ==> \result;
	//@ ensures a >= 0 ==> !\result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:13:) in method isPrime
		return true;
		^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:26:
	//@ ensures !\result;
	    ^
2 verification failures

class PrimeCheck {
   
	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a >= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	//@ ensures a >= 0 ==> !\result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:14:) in method isPrime
		return true;
		^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:25:
	//@ ensures a >= 0 ==> !\result;
	    ^
2 verification failures

class PrimeCheck {
   
	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a >= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:103: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:14:) in method __HoudiniInvoker
        isPrime(1);
               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:103:
	public boolean isPrime(int a) {
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:3: verify: Precondition conjunct is false: a < 1
	//@ requires a < 1;
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:99:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:19:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:29: verify: Precondition conjunct is false: a == 1
	//@ requires a == 1;
	               ^
6 verification failures

class PrimeCheck {
   
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a >= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:102: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:13:) in method __HoudiniInvoker
        isPrime(1);
               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:102:
	public boolean isPrime(int a) {
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:4: verify: Precondition conjunct is false: a != 1
	//@ requires a != 1;
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:98:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:18:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:28: verify: Precondition conjunct is false: a == 1
	//@ requires a == 1;
	               ^
6 verification failures

class PrimeCheck {
   
	//@ requires a <= 1;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a >= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:101: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:12:) in method __HoudiniInvoker
        isPrime(1);
               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:101:
	public boolean isPrime(int a) {
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:4: verify: Precondition conjunct is false: a <= 0
	//@ requires a <= 0;
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:97:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:17:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:27: verify: Precondition conjunct is false: a == 1
	//@ requires a == 1;
	               ^
6 verification failures

class PrimeCheck {
   
	//@ requires a <= 1;
	//@ requires a == 0;
	//@ requires a >= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:100: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:11:) in method __HoudiniInvoker
        isPrime(1);
               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:100:
	public boolean isPrime(int a) {
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:4: verify: Precondition conjunct is false: a == 0
	//@ requires a == 0;
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:96:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:16:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:26: verify: Precondition conjunct is false: a == 1
	//@ requires a == 1;
	               ^
6 verification failures

class PrimeCheck {
   
	//@ requires a <= 1;
	//@ requires a >= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:100: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:) in method __HoudiniInvoker
        isPrime(2);
               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:100:
	public boolean isPrime(int a) {
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:3: verify: Precondition conjunct is false: a <= 1
	//@ requires a <= 1;
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:95:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:15:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:25: verify: Precondition conjunct is false: a == 1
	//@ requires a == 1;
	               ^
6 verification failures

class PrimeCheck {
   
	//@ requires a >= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:100: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:9:) in method __HoudiniInvoker
        isPrime(-1);
               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:100:
	public boolean isPrime(int a) {
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:3: verify: Precondition conjunct is false: a >= 0
	//@ requires a >= 0;
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:94:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:14:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:24: verify: Precondition conjunct is false: a == 1
	//@ requires a == 1;
	               ^
6 verification failures

class PrimeCheck {
   
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:99: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:8:) in method __HoudiniInvoker
        isPrime(-1);
               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:99:
	public boolean isPrime(int a) {
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:3: verify: Precondition conjunct is false: a != -1
	//@ requires a != -1;
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:93:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:13:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:23: verify: Precondition conjunct is false: a == 1
	//@ requires a == 1;
	               ^
6 verification failures

class PrimeCheck {
   
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:98: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:7:) in method __HoudiniInvoker
        isPrime(-1);
               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:98:
	public boolean isPrime(int a) {
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:4: verify: Precondition conjunct is false: a > -1
	//@ requires a > -1;
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:92:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:12:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:22: verify: Precondition conjunct is false: a == 1
	//@ requires a == 1;
	               ^
6 verification failures

class PrimeCheck {
   
	//@ requires a >= -1;
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:98: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:6:) in method __HoudiniInvoker
        isPrime(-2);
               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:98:
	public boolean isPrime(int a) {
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:3: verify: Precondition conjunct is false: a >= -1
	//@ requires a >= -1;
	               ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:91:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:11:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:19: verify: Precondition conjunct is false: a < 1
	//@ requires a < 1;
	               ^
6 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:90:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:20: verify: Precondition conjunct is false: a == 1
	//@ requires a == 1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:89:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:21: verify: Precondition conjunct is false: a >= 1
	//@ requires a >= 1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:88:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:21: verify: Precondition conjunct is false: a > 1
	//@ requires a > 1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:87:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:21: verify: Precondition conjunct is false: a < 0
	//@ requires a < 0;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:86:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:23: verify: Precondition conjunct is false: a != 0
	//@ requires a != 0;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:85:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:24: verify: Precondition conjunct is false: a > 0
	//@ requires a > 0;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a >= 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:84:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:18: verify: Precondition conjunct is false: a < 1
	//@ requires a < 1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a >= 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:83:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:23: verify: Precondition conjunct is false: a < -1
	//@ requires a < -1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a >= 0;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:82:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:23: verify: Precondition conjunct is false: a <= -1
	//@ requires a <= -1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a >= 0;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:81:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:21: verify: Precondition conjunct is false: a == 0
	//@ requires a == 0;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a >= 0;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:80:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:22: verify: Precondition conjunct is false: a == -1
	//@ requires a == -1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a >= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i == a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:79:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:27: verify: Precondition conjunct is false: i == a
	//@ requires i == a;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a >= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i >= a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:78:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:28: verify: Precondition conjunct is false: i >= a
	//@ requires i >= a;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a >= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:77:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:21: verify: Precondition conjunct is false: a >= 0
	//@ requires a >= 0;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i > a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:76:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:27: verify: Precondition conjunct is false: i > a
	//@ requires i > a;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i == 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:75:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:29: verify: Precondition conjunct is false: i == 1
	//@ requires i == 1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:74:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:19: verify: Precondition conjunct is false: a != 1
	//@ requires a != 1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i >= 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:73:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:29: verify: Precondition conjunct is false: i >= 1
	//@ requires i >= 1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i > 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:72:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:29: verify: Precondition conjunct is false: i > 1
	//@ requires i > 1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i == 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:71:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:31: verify: Precondition conjunct is false: i == 0
	//@ requires i == 0;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i >= 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:70:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:32: verify: Precondition conjunct is false: i >= 0
	//@ requires i >= 0;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i > 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:69:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:32: verify: Precondition conjunct is false: i > 0
	//@ requires i > 0;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i == -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:68:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:34: verify: Precondition conjunct is false: i == -1
	//@ requires i == -1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i != -1;
	//@ requires i >= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:67:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:35: verify: Precondition conjunct is false: i >= -1
	//@ requires i >= -1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i < -1;
	//@ requires i <= -1;
	//@ requires i != -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:66:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:32: verify: Precondition conjunct is false: i < -1
	//@ requires i < -1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires i != -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:65:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:33: verify: Precondition conjunct is false: i != -1
	//@ requires i != -1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires i > -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:64:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:33: verify: Precondition conjunct is false: i > -1
	//@ requires i > -1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:63:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:19: verify: Precondition conjunct is false: a <= 0
	//@ requires a <= 0;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid == a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:62:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:34: verify: Precondition conjunct is false: mid == a
	//@ requires mid == a;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid < a;
	//@ requires mid <= a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:61:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:32: verify: Precondition conjunct is false: mid < a
	//@ requires mid < a;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a <= 1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:60:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:18: verify: Precondition conjunct is false: a <= 1
	//@ requires a <= 1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i < 1;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:59:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:24: verify: Precondition conjunct is false: i < 1
	//@ requires i < 1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i < 0;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:58:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:26: verify: Precondition conjunct is false: i < 0
	//@ requires i < 0;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:57:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:30: verify: Precondition conjunct is false: mid != a
	//@ requires mid != a;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid >= a;
	//@ requires mid > a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:56:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:31: verify: Precondition conjunct is false: mid > a
	//@ requires mid > a;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid >= a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:55:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:30: verify: Precondition conjunct is false: mid >= a
	//@ requires mid >= a;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid < i;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:54:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:30: verify: Precondition conjunct is false: mid < i
	//@ requires mid < i;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid <= i;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:53:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:30: verify: Precondition conjunct is false: mid <= i
	//@ requires mid <= i;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid == i;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:52:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:30: verify: Precondition conjunct is false: mid == i
	//@ requires mid == i;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid == 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:51:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:35: verify: Precondition conjunct is false: mid == 1
	//@ requires mid == 1;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid != 1;
	//@ requires mid >= 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:50:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:36: verify: Precondition conjunct is false: mid >= 1
	//@ requires mid >= 1;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid != 1;
	//@ requires mid > 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:49:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:36: verify: Precondition conjunct is false: mid > 1
	//@ requires mid > 1;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid != 1;
	//@ requires mid < 0;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:48:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:36: verify: Precondition conjunct is false: mid < 0
	//@ requires mid < 0;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid != 1;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid != 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:47:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:38: verify: Precondition conjunct is false: mid != 0
	//@ requires mid != 0;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid < 1;
	//@ requires mid <= 1;
	//@ requires mid != 1;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:46:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:33: verify: Precondition conjunct is false: mid < 1
	//@ requires mid < 1;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid <= 1;
	//@ requires mid != 1;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid >= 0;
	//@ requires mid > 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:45:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:38: verify: Precondition conjunct is false: mid > 0
	//@ requires mid > 0;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid <= 1;
	//@ requires mid != 1;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid >= 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:44:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:33: verify: Precondition conjunct is false: mid <= 1
	//@ requires mid <= 1;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i <= 1;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid != 1;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid >= 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:43:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:24: verify: Precondition conjunct is false: i <= 1
	//@ requires i <= 1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid != 1;
	//@ requires mid <= 0;
	//@ requires mid == 0;
	//@ requires mid >= 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:42:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:33: verify: Precondition conjunct is false: mid <= 0
	//@ requires mid <= 0;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid != 1;
	//@ requires mid == 0;
	//@ requires mid >= 0;
	//@ requires mid < -1;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:41:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:35: verify: Precondition conjunct is false: mid < -1
	//@ requires mid < -1;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid != 1;
	//@ requires mid == 0;
	//@ requires mid >= 0;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:40:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:32: verify: Precondition conjunct is false: mid != 1
	//@ requires mid != 1;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid == 0;
	//@ requires mid >= 0;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:39:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:32: verify: Precondition conjunct is false: mid == 0
	//@ requires mid == 0;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid >= 0;
	//@ requires mid <= -1;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:38:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:33: verify: Precondition conjunct is false: mid <= -1
	//@ requires mid <= -1;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid >= 0;
	//@ requires mid == -1;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:37:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:33: verify: Precondition conjunct is false: mid == -1
	//@ requires mid == -1;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid >= 0;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:36:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:18: verify: Precondition conjunct is false: a != -1
	//@ requires a != -1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid >= 0;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:35:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:19: verify: Precondition conjunct is false: a > -1
	//@ requires a > -1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a >= -1;
	//@ requires i < a;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid >= 0;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:34:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:19: verify: Precondition conjunct is false: i < a
	//@ requires i < a;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a >= -1;
	//@ requires i <= a;
	//@ requires i != a;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid >= 0;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:33:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:20: verify: Precondition conjunct is false: i != a
	//@ requires i != a;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a >= -1;
	//@ requires i <= a;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid >= 0;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:32:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:24: verify: Precondition conjunct is false: mid <= a
	//@ requires mid <= a;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a >= -1;
	//@ requires i <= a;
	//@ requires i != 1;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid >= 0;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:31:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:20: verify: Precondition conjunct is false: i != 1
	//@ requires i != 1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a >= -1;
	//@ requires i <= a;
	//@ requires i <= 0;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid >= 0;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:30:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:20: verify: Precondition conjunct is false: i <= 0
	//@ requires i <= 0;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a >= -1;
	//@ requires i <= a;
	//@ requires i != 0;
	//@ requires i <= -1;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid >= 0;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:29:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:21: verify: Precondition conjunct is false: i <= -1
	//@ requires i <= -1;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a >= -1;
	//@ requires i <= a;
	//@ requires i != 0;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid >= 0;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:28:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:20: verify: Precondition conjunct is false: i != 0
	//@ requires i != 0;
	               ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a >= -1;
	//@ requires i <= a;
	//@ requires mid != i;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid >= 0;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:27:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:20: verify: Precondition conjunct is false: mid != i
	//@ requires mid != i;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a >= -1;
	//@ requires i <= a;
	//@ requires mid >= i;
	//@ requires mid > i;
	//@ requires mid >= 0;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:26:) in method isPrime
			__Loop_Invariant_Dummy1(a, i, mid);
			                       ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:10:
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:21: verify: Precondition conjunct is false: mid > i
	//@ requires mid > i;
	                 ^
3 verification failures

class PrimeCheck {
   
	//@ ensures \result;
	//@ ensures a >= 0 ==> \result;
	public boolean isPrime(int a) {
		int i = 2;
		int mid = a/2;

		while (i <= mid) {
			__Loop_Invariant_Dummy1(a, i, mid);
			if (a%i == 0)
				return false;
			i++;
		}
		return true;
	}

	//@ requires a >= -1;
	//@ requires i <= a;
	//@ requires mid >= i;
	//@ requires mid >= 0;
	//@ requires mid != -1;
	//@ requires mid >= -1;
	//@ requires mid > -1;
	public static void __Loop_Invariant_Dummy1(int a, int i, int mid) {}

	void __HoudiniInvoker() {
        isPrime(0);
        isPrime(1);
        isPrime(2);
        isPrime(-1);
        isPrime(-2);
    }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:11: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method isPrime
			if (a%i == 0)
			     ^
1 verification failure

