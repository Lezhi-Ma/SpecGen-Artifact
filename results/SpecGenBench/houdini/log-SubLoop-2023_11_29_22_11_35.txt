public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:318: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:76:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:318:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:4: verify: Precondition conjunct is false: x == 1
    //@ requires x == 1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:317: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:75:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:317:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:5: verify: Precondition conjunct is false: x >= 1
    //@ requires x >= 1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:316: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:74:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:316:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:5: verify: Precondition conjunct is false: x > 1
    //@ requires x > 1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:315: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:73:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:315:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: Precondition conjunct is false: x == 0
    //@ requires x == 0;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:314: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:72:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:314:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:8: verify: Precondition conjunct is false: x >= 0
    //@ requires x >= 0;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:313: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:71:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:313:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:8: verify: Precondition conjunct is false: x > 0
    //@ requires x > 0;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:312: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:70:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:312:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:311: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:69:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:311:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:11: verify: Precondition conjunct is false: x >= -1
    //@ requires x >= -1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:310: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:68:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:310:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:11: verify: Precondition conjunct is false: x > -1
    //@ requires x > -1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:309: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:309:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:11: verify: Precondition conjunct is false: y < x
    //@ requires y < x;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:308: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:66:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:308:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:11: verify: Precondition conjunct is false: y <= x
    //@ requires y <= x;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:307: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:65:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:307:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:11: verify: Precondition conjunct is false: y == x
    //@ requires y == x;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:306: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:64:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:306:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:16: verify: Precondition conjunct is false: y == 1
    //@ requires y == 1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:305: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:63:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:305:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:17: verify: Precondition conjunct is false: y >= 1
    //@ requires y >= 1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:304: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:62:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:304:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:17: verify: Precondition conjunct is false: y > 1
    //@ requires y > 1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:303: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:61:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:303:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:17: verify: Precondition conjunct is false: y < 0
    //@ requires y < 0;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:302: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:60:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:302:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:19: verify: Precondition conjunct is false: y != 0
    //@ requires y != 0;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:301: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:59:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:301:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:20: verify: Precondition conjunct is false: y > 0
    //@ requires y > 0;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:300: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:58:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:300:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:20: verify: Precondition conjunct is false: y < -1
    //@ requires y < -1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:299: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:57:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:299:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:20: verify: Precondition conjunct is false: y <= -1
    //@ requires y <= -1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:298: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:56:) in method main
        subLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:298:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:20: verify: Precondition conjunct is false: y == -1
    //@ requires y == -1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:293:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:293: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:187: verify: Precondition conjunct is false: x == 1
    //@ requires x == 1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:292:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:292: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:188: verify: Precondition conjunct is false: x >= 1
    //@ requires x >= 1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:291:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:291: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:188: verify: Precondition conjunct is false: x > 1
    //@ requires x > 1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:290:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:290: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:190: verify: Precondition conjunct is false: x == 0
    //@ requires x == 0;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:289:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:289: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:191: verify: Precondition conjunct is false: x >= 0
    //@ requires x >= 0;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:288:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:288: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:191: verify: Precondition conjunct is false: x > 0
    //@ requires x > 0;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:287:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:287: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:193: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:286:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:286: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:194: verify: Precondition conjunct is false: x >= -1
    //@ requires x >= -1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:285:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:285: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:194: verify: Precondition conjunct is false: x > -1
    //@ requires x > -1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:284:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:284: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:194: verify: Precondition conjunct is false: y < x
    //@ requires y < x;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:283:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:283: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:194: verify: Precondition conjunct is false: y <= x
    //@ requires y <= x;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:282:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:282: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:194: verify: Precondition conjunct is false: y == x
    //@ requires y == x;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:281:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:281: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:199: verify: Precondition conjunct is false: y == 1
    //@ requires y == 1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:280:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:280: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:200: verify: Precondition conjunct is false: y >= 1
    //@ requires y >= 1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:279:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:279: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:200: verify: Precondition conjunct is false: y > 1
    //@ requires y > 1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:278:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:278: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:200: verify: Precondition conjunct is false: y < 0
    //@ requires y < 0;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:277:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:277: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:202: verify: Precondition conjunct is false: y != 0
    //@ requires y != 0;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:276:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:276: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:203: verify: Precondition conjunct is false: y > 0
    //@ requires y > 0;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:275:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:275: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:203: verify: Precondition conjunct is false: y < -1
    //@ requires y < -1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:274:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:274: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:203: verify: Precondition conjunct is false: y <= -1
    //@ requires y <= -1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:273:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:273: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:203: verify: Precondition conjunct is false: y == -1
    //@ requires y == -1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:272:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:272: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:206: verify: Precondition conjunct is false: n < x
    //@ requires n < x;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:271:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:271: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:206: verify: Precondition conjunct is false: n <= x
    //@ requires n <= x;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:270:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:270: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:206: verify: Precondition conjunct is false: n == x
    //@ requires n == x;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:269:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:269: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:209: verify: Precondition conjunct is false: n < 1
    //@ requires n < 1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:268:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:268: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:209: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:267:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:267: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:209: verify: Precondition conjunct is false: n == 1
    //@ requires n == 1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:266:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:266: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:209: verify: Precondition conjunct is false: n != 1
    //@ requires n != 1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:265:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:265: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:210: verify: Precondition conjunct is false: n > 1
    //@ requires n > 1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:264:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:264: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:210: verify: Precondition conjunct is false: n < 0
    //@ requires n < 0;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:263:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:263: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:210: verify: Precondition conjunct is false: n <= 0
    //@ requires n <= 0;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:262:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:262: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:210: verify: Precondition conjunct is false: n == 0
    //@ requires n == 0;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:261:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:261: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:213: verify: Precondition conjunct is false: n < -1
    //@ requires n < -1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:260:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:260: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:213: verify: Precondition conjunct is false: n <= -1
    //@ requires n <= -1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:259:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:259: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:213: verify: Precondition conjunct is false: n == -1
    //@ requires n == -1;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:258:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:258: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:216: verify: Precondition conjunct is false: n < y
    //@ requires n < y;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:257:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:257: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:216: verify: Precondition conjunct is false: n <= y
    //@ requires n <= y;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:256:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:256: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:216: verify: Precondition conjunct is false: n == y
    //@ requires n == y;
                   ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:255:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:255: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:219: verify: Precondition conjunct is false: sum < x
    //@ requires sum < x;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:254:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:254: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:220: verify: Precondition conjunct is false: sum == x
    //@ requires sum == x;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:253:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:253: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:220: verify: Precondition conjunct is false: sum != x
    //@ requires sum != x;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:252:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:252: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:220: verify: Precondition conjunct is false: sum >= x
    //@ requires sum >= x;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:251:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:251: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:220: verify: Precondition conjunct is false: sum > x
    //@ requires sum > x;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:250:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:250: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:222: verify: Precondition conjunct is false: sum == 1
    //@ requires sum == 1;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:249:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:249: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:223: verify: Precondition conjunct is false: sum >= 1
    //@ requires sum >= 1;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:248:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:248: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:223: verify: Precondition conjunct is false: sum > 1
    //@ requires sum > 1;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:247:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:247: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:225: verify: Precondition conjunct is false: sum == 0
    //@ requires sum == 0;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:246:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:246: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:226: verify: Precondition conjunct is false: sum >= 0
    //@ requires sum >= 0;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:245:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:245: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:226: verify: Precondition conjunct is false: sum > 0
    //@ requires sum > 0;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:244:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:244: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:228: verify: Precondition conjunct is false: sum == -1
    //@ requires sum == -1;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:243:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:243: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:229: verify: Precondition conjunct is false: sum >= -1
    //@ requires sum >= -1;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:242:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:242: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:229: verify: Precondition conjunct is false: sum > -1
    //@ requires sum > -1;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:241:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:241: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:231: verify: Precondition conjunct is false: sum == n
    //@ requires sum == n;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:240:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:240: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:232: verify: Precondition conjunct is false: sum >= n
    //@ requires sum >= n;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum != n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:239:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:239: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:232: verify: Precondition conjunct is false: sum > n
    //@ requires sum > n;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum != n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:238:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:238: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:234: verify: Precondition conjunct is false: sum == y
    //@ requires sum == y;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum != n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:237:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:237: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:235: verify: Precondition conjunct is false: sum >= y
    //@ requires sum >= y;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum != n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum != y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:236:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:236: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:235: verify: Precondition conjunct is false: sum > y
    //@ requires sum > y;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum != n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum != y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:235:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:235: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:219: verify: Precondition conjunct is false: sum <= x
    //@ requires sum <= x;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum != n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum != y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:234:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:234: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:225: verify: Precondition conjunct is false: sum < -1
    //@ requires sum < -1;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum != n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum != y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:233:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:233: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:226: verify: Precondition conjunct is false: sum != -1
    //@ requires sum != -1;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum <= -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum != n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum != y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:232:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:232: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:219: verify: Precondition conjunct is false: sum < 1
    //@ requires sum < 1;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum <= -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum != n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum != y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:231:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:231: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:219: verify: Precondition conjunct is false: sum <= 1
    //@ requires sum <= 1;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum <= -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum != n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum != y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:230:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:230: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:219: verify: Precondition conjunct is false: sum != 1
    //@ requires sum != 1;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum <= -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum != n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum != y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:229:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:229: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:219: verify: Precondition conjunct is false: sum < 0
    //@ requires sum < 0;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum <= -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum != n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum != y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:228:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:228: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:219: verify: Precondition conjunct is false: sum <= 0
    //@ requires sum <= 0;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum != 0;
    //@ requires sum <= -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum != n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum != y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:227:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:227: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:219: verify: Precondition conjunct is false: sum != 0
    //@ requires sum != 0;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum != n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum != y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:226:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:226: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:219: verify: Precondition conjunct is false: sum <= -1
    //@ requires sum <= -1;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum != n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum != y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:225:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:225: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:219: verify: Precondition conjunct is false: sum < n
    //@ requires sum < n;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= n;
    //@ requires sum != n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum != y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:224:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:224: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:219: verify: Precondition conjunct is false: sum <= n
    //@ requires sum <= n;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum != n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum != y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:223:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:223: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:219: verify: Precondition conjunct is false: sum != n
    //@ requires sum != n;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum != y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:222:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:222: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:219: verify: Precondition conjunct is false: sum < y
    //@ requires sum < y;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum <= y;
    //@ requires sum != y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:221:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:221: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:219: verify: Precondition conjunct is false: sum <= y
    //@ requires sum <= y;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum != y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:220:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:220: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:219: verify: Precondition conjunct is false: sum != y
    //@ requires sum != y;
                     ^
3 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:72: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:23:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:72:
    //@ ensures \result < x;
        ^
2 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:71: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:23:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:71:
    //@ ensures \result <= x;
        ^
2 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:70: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:23:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:70:
    //@ ensures \result == x;
        ^
2 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:69: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:26:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:69:
    //@ ensures \result < 1;
        ^
2 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:68: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:26:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:68:
    //@ ensures \result <= 1;
        ^
2 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:26:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:
    //@ ensures \result == 1;
        ^
2 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:66: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:29:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:66:
    //@ ensures \result < 0;
        ^
2 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:65: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:29:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:65:
    //@ ensures \result <= 0;
        ^
2 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:64: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:29:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:64:
    //@ ensures \result == 0;
        ^
2 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:63: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:32:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:63:
    //@ ensures \result < -1;
        ^
2 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:62: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:32:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:62:
    //@ ensures \result <= -1;
        ^
2 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:61: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:32:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:61:
    //@ ensures \result == -1;
        ^
2 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < y;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:60: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:35:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:60:
    //@ ensures \result < y;
        ^
2 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result <= y;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:59: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:35:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:59:
    //@ ensures \result <= y;
        ^
2 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result == y;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:58: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:35:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:58:
    //@ ensures \result == y;
        ^
2 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:209: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:40:) in method main
        subLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:209:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:5: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:57: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:26:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:57:
    //@ ensures \result != 1;
        ^
5 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:208: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:39:) in method main
        subLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:208:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:6: verify: Precondition conjunct is false: x != 0
    //@ requires x != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:56: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:25:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:56:
    //@ ensures \result != 1;
        ^
5 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:207: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:38:) in method main
        subLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:207:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:6: verify: Precondition conjunct is false: x < -1
    //@ requires x < -1;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:55: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:24:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:55:
    //@ ensures \result != 1;
        ^
5 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:206: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:37:) in method main
        subLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:206:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:6: verify: Precondition conjunct is false: x <= -1
    //@ requires x <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:54: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:23:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:54:
    //@ ensures \result != 1;
        ^
5 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:205: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:36:) in method main
        subLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:205:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:8: verify: Precondition conjunct is false: y >= x
    //@ requires y >= x;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:53: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:22:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:53:
    //@ ensures \result != 1;
        ^
5 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:204: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:35:) in method main
        subLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:204:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:8: verify: Precondition conjunct is false: y > x
    //@ requires y > x;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:52: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:21:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:52:
    //@ ensures \result != 1;
        ^
5 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:203: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:34:) in method main
        subLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:203:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:12: verify: Precondition conjunct is false: y == 0
    //@ requires y == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:51: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:20:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:51:
    //@ ensures \result != 1;
        ^
5 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:202: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:33:) in method main
        subLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:202:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:12: verify: Precondition conjunct is false: y >= 0
    //@ requires y >= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:50: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:19:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:50:
    //@ ensures \result != 1;
        ^
5 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:201: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:32:) in method main
        subLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:201:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:13: verify: Precondition conjunct is false: y >= -1
    //@ requires y >= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:49: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:18:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:49:
    //@ ensures \result != 1;
        ^
5 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y != -1;
    //@ requires y > -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:200: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:31:) in method main
        subLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:200:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:13: verify: Precondition conjunct is false: y > -1
    //@ requires y > -1;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:48: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:17:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:48:
    //@ ensures \result != 1;
        ^
5 verification failures

public class SubLoop {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y != -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:200: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:30:) in method main
        subLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:200:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:2: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:194:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:194: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:42:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:163: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class SubLoop {
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y != -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:199: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:29:) in method main
        subLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:199:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:2: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:193:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:193: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:41:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:162: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class SubLoop {
    //@ requires x != 1;
    //@ requires x <= 0;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y != -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:198: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:28:) in method main
        subLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:198:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:3: verify: Precondition conjunct is false: x <= 0
    //@ requires x <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:192:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:192: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:40:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:161: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class SubLoop {
    //@ requires x != 1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y != -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:198: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:27:) in method main
        subLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:198:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:5: verify: Precondition conjunct is false: y < 1
    //@ requires y < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:191:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:191: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:39:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:157: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
6 verification failures

public class SubLoop {
    //@ requires x != 1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y != -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:197: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:26:) in method main
        subLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:197:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:5: verify: Precondition conjunct is false: y <= 1
    //@ requires y <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:190:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:190: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:38:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:156: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
6 verification failures

public class SubLoop {
    //@ requires x != 1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y != -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:196: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:25:) in method main
        subLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:196:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:6: verify: Precondition conjunct is false: y <= 0
    //@ requires y <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:37: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:189:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:189: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:37:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:155: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
6 verification failures

public class SubLoop {
    //@ requires x != 1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y != 1;
    //@ requires y != -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:196: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:24:) in method main
        subLoop(-4, -4);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:196:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:4: verify: Precondition conjunct is false: y != x
    //@ requires y != x;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:41: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:8:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:41:
    //@ ensures \result >= x;
        ^
5 verification failures

public class SubLoop {
    //@ requires x != 1;
    //@ requires x != -1;
    //@ requires y != 1;
    //@ requires y != -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:200: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:23:) in method main
        subLoop(1, -1);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:200:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:2: verify: Precondition conjunct is false: x != 1
    //@ requires x != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:40: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:40:
    //@ ensures \result >= x;
        ^
5 verification failures

public class SubLoop {
    //@ requires x != -1;
    //@ requires y != 1;
    //@ requires y != -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:199: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:22:) in method main
        subLoop(1, -1);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:199:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:4: verify: Precondition conjunct is false: y != -1
    //@ requires y != -1;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:39: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:6:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:39:
    //@ ensures \result >= x;
        ^
5 verification failures

public class SubLoop {
    //@ requires x != -1;
    //@ requires y != 1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:199: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:21:) in method main
        subLoop(-1, 1);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:199:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:2: verify: Precondition conjunct is false: x != -1
    //@ requires x != -1;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:38: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:5:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:38:
    //@ ensures \result >= x;
        ^
5 verification failures

public class SubLoop {
    //@ requires y != 1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:198: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:20:) in method main
        subLoop(-1, 1);
               ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:198:
    public static int subLoop(int x, int y) {
                      ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:2: verify: Precondition conjunct is false: y != 1
    //@ requires y != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:37: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:4:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:37:
    //@ ensures \result >= x;
        ^
5 verification failures

public class SubLoop {
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:3:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:36:
    //@ ensures \result >= x;
        ^
2 verification failures

public class SubLoop {
    //@ ensures \result != x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:35: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:3:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:35:
    //@ ensures \result > x;
        ^
2 verification failures

public class SubLoop {
    //@ ensures \result != x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:34: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:4:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:34:
    //@ ensures \result >= 1;
        ^
2 verification failures

public class SubLoop {
    //@ ensures \result != x;
    //@ ensures \result != 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:33: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:4:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:33:
    //@ ensures \result > 1;
        ^
2 verification failures

public class SubLoop {
    //@ ensures \result != x;
    //@ ensures \result != 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:5:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:32:
    //@ ensures \result >= 0;
        ^
2 verification failures

public class SubLoop {
    //@ ensures \result != x;
    //@ ensures \result != 1;
    //@ ensures \result != 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:31: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:5:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:31:
    //@ ensures \result > 0;
        ^
2 verification failures

public class SubLoop {
    //@ ensures \result != x;
    //@ ensures \result != 1;
    //@ ensures \result != 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:6:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:30:
    //@ ensures \result >= -1;
        ^
2 verification failures

public class SubLoop {
    //@ ensures \result != x;
    //@ ensures \result != 1;
    //@ ensures \result != 0;
    //@ ensures \result != -1;
    //@ ensures \result > -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:29: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:6:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:29:
    //@ ensures \result > -1;
        ^
2 verification failures

public class SubLoop {
    //@ ensures \result != x;
    //@ ensures \result != 1;
    //@ ensures \result != 0;
    //@ ensures \result != -1;
    //@ ensures \result != y;
    //@ ensures \result >= y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:28:
    //@ ensures \result >= y;
        ^
2 verification failures

public class SubLoop {
    //@ ensures \result != x;
    //@ ensures \result != 1;
    //@ ensures \result != 0;
    //@ ensures \result != -1;
    //@ ensures \result != y;
    //@ ensures \result > y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:27:
    //@ ensures \result > y;
        ^
2 verification failures

public class SubLoop {
    //@ ensures \result != x;
    //@ ensures \result != 1;
    //@ ensures \result != 0;
    //@ ensures \result != -1;
    //@ ensures \result != y;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:26:
    //@ ensures x >= 0 ==> \result >= 0;
        ^
2 verification failures

public class SubLoop {
    //@ ensures \result != x;
    //@ ensures \result != 1;
    //@ ensures \result != 0;
    //@ ensures \result != -1;
    //@ ensures \result != y;
    //@ ensures y >= 0 ==> \result >= 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:25:
    //@ ensures y >= 0 ==> \result >= 0;
        ^
2 verification failures

public class SubLoop {
    //@ ensures \result != x;
    //@ ensures \result != 1;
    //@ ensures \result != 0;
    //@ ensures \result != -1;
    //@ ensures \result != y;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:5:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:24:
    //@ ensures \result != -1;
        ^
2 verification failures

public class SubLoop {
    //@ ensures \result != x;
    //@ ensures \result != 1;
    //@ ensures \result != 0;
    //@ ensures \result != y;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:2:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:23:
    //@ ensures \result != x;
        ^
2 verification failures

public class SubLoop {
    //@ ensures \result != 1;
    //@ ensures \result != 0;
    //@ ensures \result != y;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:4:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:22:
    //@ ensures \result != y;
        ^
2 verification failures

public class SubLoop {
    //@ ensures \result != 1;
    //@ ensures \result != 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:2:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:21:
    //@ ensures \result != 1;
        ^
2 verification failures

public class SubLoop {
    //@ ensures \result != 0;
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:2:) in method subLoop
        return sum;
        ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:20:
    //@ ensures \result != 0;
        ^
2 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:130:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:129:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:128:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: x == 1
    //@ requires x == 1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:127:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: x != 1
    //@ requires x != 1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:126:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: x >= 1
    //@ requires x >= 1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:125:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: x > 1
    //@ requires x > 1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:124:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:123:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: x <= 0
    //@ requires x <= 0;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:122:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: x == 0
    //@ requires x == 0;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:121:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: x != 0
    //@ requires x != 0;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:120:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: x >= 0
    //@ requires x >= 0;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:119:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: x > 0
    //@ requires x > 0;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:118:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: x < -1
    //@ requires x < -1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:117:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: x <= -1
    //@ requires x <= -1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:116:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:115:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: x != -1
    //@ requires x != -1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:114:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: x >= -1
    //@ requires x >= -1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires x > -1;
    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:113:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: x > -1
    //@ requires x > -1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y < x;
    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:112:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: y < x
    //@ requires y < x;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y <= x;
    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:111:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: y <= x
    //@ requires y <= x;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y == x;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:110:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: y == x
    //@ requires y == x;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:109:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: y != x
    //@ requires y != x;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:108:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: y >= x
    //@ requires y >= x;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:107:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: y > x
    //@ requires y > x;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:106:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: y < 1
    //@ requires y < 1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y <= 1;
    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:105:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: y <= 1
    //@ requires y <= 1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y == 1;
    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:104:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: y == 1
    //@ requires y == 1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y != 1;
    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:103:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:22: verify: Precondition conjunct is false: y != 1
    //@ requires y != 1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y > 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:102:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:23: verify: Precondition conjunct is false: y > 1
    //@ requires y > 1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y < 0;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:101:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:23: verify: Precondition conjunct is false: y < 0
    //@ requires y < 0;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:100:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:23: verify: Precondition conjunct is false: y <= 0
    //@ requires y <= 0;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y == 0;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:99:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:23: verify: Precondition conjunct is false: y == 0
    //@ requires y == 0;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y < -1;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:98:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:26: verify: Precondition conjunct is false: y < -1
    //@ requires y < -1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y <= -1;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:97:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:26: verify: Precondition conjunct is false: y <= -1
    //@ requires y <= -1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y == -1;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:96:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:26: verify: Precondition conjunct is false: y == -1
    //@ requires y == -1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:95:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:29: verify: Precondition conjunct is false: n < x
    //@ requires n < x;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:94:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:29: verify: Precondition conjunct is false: n <= x
    //@ requires n <= x;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:93:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:29: verify: Precondition conjunct is false: n == x
    //@ requires n == x;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:92:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:29: verify: Precondition conjunct is false: n != x
    //@ requires n != x;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:91:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:29: verify: Precondition conjunct is false: n >= x
    //@ requires n >= x;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:90:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:29: verify: Precondition conjunct is false: n > x
    //@ requires n > x;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:89:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:29: verify: Precondition conjunct is false: n < 1
    //@ requires n < 1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:88:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:29: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:87:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:29: verify: Precondition conjunct is false: n == 1
    //@ requires n == 1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:86:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:29: verify: Precondition conjunct is false: n != 1
    //@ requires n != 1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:85:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:30: verify: Precondition conjunct is false: n > 1
    //@ requires n > 1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:84:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:30: verify: Precondition conjunct is false: n < 0
    //@ requires n < 0;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:83:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:30: verify: Precondition conjunct is false: n <= 0
    //@ requires n <= 0;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:82:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:30: verify: Precondition conjunct is false: n == 0
    //@ requires n == 0;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:81:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:33: verify: Precondition conjunct is false: n < -1
    //@ requires n < -1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:80:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:33: verify: Precondition conjunct is false: n <= -1
    //@ requires n <= -1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:79:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:33: verify: Precondition conjunct is false: n == -1
    //@ requires n == -1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < y;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:78:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: n < y
    //@ requires n < y;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n <= y;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:77:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: n <= y
    //@ requires n <= y;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n == y;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:76:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: n == y
    //@ requires n == y;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:75:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: n != y
    //@ requires n != y;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n >= y;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:74:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: n >= y
    //@ requires n >= y;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n > y;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:73:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: n > y
    //@ requires n > y;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum < x;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:72:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum < x
    //@ requires sum < x;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum <= x;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:71:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum <= x
    //@ requires sum <= x;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum == x;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:70:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum == x
    //@ requires sum == x;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum != x;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:69:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum != x
    //@ requires sum != x;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum >= x;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:68:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum >= x
    //@ requires sum >= x;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum > x;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum > x
    //@ requires sum > x;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:66:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum < 1
    //@ requires sum < 1;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:65:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum <= 1
    //@ requires sum <= 1;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:64:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum == 1
    //@ requires sum == 1;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:63:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum != 1
    //@ requires sum != 1;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:62:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum >= 1
    //@ requires sum >= 1;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:61:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum > 1
    //@ requires sum > 1;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:60:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum < 0
    //@ requires sum < 0;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:59:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum <= 0
    //@ requires sum <= 0;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:58:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum == 0
    //@ requires sum == 0;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:57:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum != 0
    //@ requires sum != 0;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:56:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum >= 0
    //@ requires sum >= 0;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:55:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum > 0
    //@ requires sum > 0;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:54:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum < -1
    //@ requires sum < -1;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:53:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum <= -1
    //@ requires sum <= -1;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:52:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum == -1
    //@ requires sum == -1;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:51:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum != -1
    //@ requires sum != -1;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:50:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum >= -1
    //@ requires sum >= -1;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:49:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum > -1
    //@ requires sum > -1;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum < n;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:48:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum < n
    //@ requires sum < n;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum <= n;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:47:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum <= n
    //@ requires sum <= n;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum == n;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:46:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum == n
    //@ requires sum == n;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum != n;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:45:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum != n
    //@ requires sum != n;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum >= n;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:44:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum >= n
    //@ requires sum >= n;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum > n;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:43:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum > n
    //@ requires sum > n;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum < y;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:42:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum < y
    //@ requires sum < y;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum <= y;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:41:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum <= y
    //@ requires sum <= y;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum == y;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:40:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum == y
    //@ requires sum == y;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum != y;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:39:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum != y
    //@ requires sum != y;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum >= y;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:38:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum >= y
    //@ requires sum >= y;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires sum > y;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:37:) in method subLoop
                __Loop_Invariant_Dummy1(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:36: verify: Precondition conjunct is false: sum > y
    //@ requires sum > y;
                     ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:72:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:38: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:71:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:38: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:70:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:38: verify: Precondition conjunct is false: x != 1
    //@ requires x != 1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:69:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:38: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:68:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:38: verify: Precondition conjunct is false: x <= 0
    //@ requires x <= 0;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:67:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:38: verify: Precondition conjunct is false: x != 0
    //@ requires x != 0;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:66:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:38: verify: Precondition conjunct is false: x < -1
    //@ requires x < -1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x <= -1;
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:65:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:38: verify: Precondition conjunct is false: x <= -1
    //@ requires x <= -1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires x != -1;
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:64:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:38: verify: Precondition conjunct is false: x != -1
    //@ requires x != -1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires y != x;
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:63:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:38: verify: Precondition conjunct is false: y != x
    //@ requires y != x;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires y >= x;
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:62:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:38: verify: Precondition conjunct is false: y >= x
    //@ requires y >= x;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires y > x;
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:61:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:38: verify: Precondition conjunct is false: y > x
    //@ requires y > x;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y == 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:60:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:42: verify: Precondition conjunct is false: y == 0
    //@ requires y == 0;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y >= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:59:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:42: verify: Precondition conjunct is false: y >= 0
    //@ requires y >= 0;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:58:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:42: verify: Precondition conjunct is false: y != -1
    //@ requires y != -1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:57:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:42: verify: Precondition conjunct is false: y >= -1
    //@ requires y >= -1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires y > -1;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:56:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:42: verify: Precondition conjunct is false: y > -1
    //@ requires y > -1;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:55:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:42: verify: Precondition conjunct is false: n != x
    //@ requires n != x;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:54:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:42: verify: Precondition conjunct is false: n >= x
    //@ requires n >= x;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires n > x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}


/home/max/Documents/JMLGPT/tmp/SubLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SubLoop.java:53:) in method subLoop
                __Loop_Invariant_Dummy2(x, y, n, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SubLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SubLoop.java:42: verify: Precondition conjunct is false: n > x
    //@ requires n > x;
                   ^
3 verification failures

public class SubLoop {
    public static int subLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            while (n > 0) {
                __Loop_Invariant_Dummy1(x, y, n, sum);
                sum = sum - 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            while (n > 0) {
                __Loop_Invariant_Dummy2(x, y, n, sum);
                sum = sum + 1;
                n = n - 1;
            }
        }
        return sum;
    }

    //@ requires y >= 1;
    //@ requires y != 0;
    //@ requires y >= 0;
    //@ requires y > 0;
    //@ requires y != -1;
    //@ requires y >= -1;
    //@ requires y > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int y, int n, int sum) {}
    
    //@ requires y < 1;
    //@ requires y <= 1;
    //@ requires y != 1;
    //@ requires y <= 0;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != y;
    //@ requires n >= y;
    //@ requires n > y;
    public static void __Loop_Invariant_Dummy2(int x, int y, int n, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        subLoop(-4, 0);
        subLoop(0, -4);
        subLoop(4, 0);
        subLoop(0, 4);
        subLoop(-4, -4);
        subLoop(4, 4);
        subLoop(0, 0);
        subLoop(-4, 4);
        subLoop(4, -4);
        subLoop(1, -1);
        subLoop(-1, 1);
        subLoop(1, 0);
        subLoop(-1, 0);
    }

}



