public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:407: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:46:) in method main
        cubeOf(-1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:407:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:5: verify: Precondition conjunct is false: x == 1
    //@ requires x == 1;
                   ^
3 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:406: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:45:) in method main
        cubeOf(-1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:406:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x >= 1
    //@ requires x >= 1;
                   ^
3 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:405: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:44:) in method main
        cubeOf(-1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:405:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x > 1
    //@ requires x > 1;
                   ^
3 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:404: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:43:) in method main
        cubeOf(-1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:404:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:8: verify: Precondition conjunct is false: x == 0
    //@ requires x == 0;
                   ^
3 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:403: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:42:) in method main
        cubeOf(-1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:403:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:9: verify: Precondition conjunct is false: x >= 0
    //@ requires x >= 0;
                   ^
3 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:402: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:41:) in method main
        cubeOf(-1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:402:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:9: verify: Precondition conjunct is false: x > 0
    //@ requires x > 0;
                   ^
3 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:401: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:40:) in method main
        cubeOf(-1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:401:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:9: verify: Precondition conjunct is false: x < -1
    //@ requires x < -1;
                   ^
3 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:400: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:39:) in method main
        cubeOf(-1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:400:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Precondition conjunct is false: x != -1
    //@ requires x != -1;
                   ^
3 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:399: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:38:) in method main
        cubeOf(-1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:399:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:12: verify: Precondition conjunct is false: x > -1
    //@ requires x > -1;
                   ^
3 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:54: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:12:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:54:
    //@ ensures \result < x;
        ^
2 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:53: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:12:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:53:
    //@ ensures \result <= x;
        ^
2 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:52: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:12:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:52:
    //@ ensures \result == x;
        ^
2 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:51: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:12:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:51:
    //@ ensures \result != x;
        ^
2 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:50: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:50:
    //@ ensures \result > x;
        ^
2 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result >= x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:49: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:49:
    //@ ensures \result < 1;
        ^
2 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result >= x;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:48: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:48:
    //@ ensures \result <= 1;
        ^
2 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result >= x;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:47: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:47:
    //@ ensures \result == 1;
        ^
2 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result >= x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:46: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:46:
    //@ ensures \result != 1;
        ^
2 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result >= x;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:45: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:45:
    //@ ensures \result >= 1;
        ^
2 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result >= x;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:44: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:44:
    //@ ensures \result > 1;
        ^
2 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result >= x;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:43:
    //@ ensures \result < 0;
        ^
2 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result >= x;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:42: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:42:
    //@ ensures \result <= 0;
        ^
2 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result >= x;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:41: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:41:
    //@ ensures \result == 0;
        ^
2 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result >= x;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:40: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:40:
    //@ ensures \result != 0;
        ^
2 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result >= x;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:39: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:39:
    //@ ensures \result >= 0;
        ^
2 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result >= x;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:38: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:38:
    //@ ensures \result > 0;
        ^
2 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result >= x;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:37: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:37:
    //@ ensures \result < -1;
        ^
2 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result >= x;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:36: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:36:
    //@ ensures \result <= -1;
        ^
2 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result >= x;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:35: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:35:
    //@ ensures \result == -1;
        ^
2 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result >= x;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:34: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:34:
    //@ ensures \result != -1;
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:379: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:17:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:379:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
5 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result >= x;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:33: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:14:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:33:
    //@ ensures \result > -1;
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:378: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:16:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:378:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
5 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result >= x;
    //@ ensures \result >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:12:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:32:
    //@ ensures \result >= x;
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:377: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:15:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:377:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
5 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:31: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:12:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:31:
    //@ ensures \result >= -1;
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:376: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:14:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:376:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
5 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:107:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:33: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:375: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:375:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:106:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:35: verify: Precondition conjunct is false: x != 1
    //@ requires x != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:374: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:374:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:105:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:36: verify: Precondition conjunct is false: x > 1
    //@ requires x > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:373: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:373:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:104:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:36: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:372: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:372:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:103:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:36: verify: Precondition conjunct is false: x <= 0
    //@ requires x <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:371: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:371:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:102:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:36: verify: Precondition conjunct is false: x == 0
    //@ requires x == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:370: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:370:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:101:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:39: verify: Precondition conjunct is false: x < -1
    //@ requires x < -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:369: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:369:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:100:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:39: verify: Precondition conjunct is false: x <= -1
    //@ requires x <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:368: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:368:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:99:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:39: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:367: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:367:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:98:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: !neg
    //@ requires !neg;
                 ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:366: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:366:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:97:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res < x
    //@ requires res < x;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:365: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:365:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:96:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res <= x
    //@ requires res <= x;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:364: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:364:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:95:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res == x
    //@ requires res == x;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:363: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:363:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:94:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res != x
    //@ requires res != x;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:362: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:362:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:93:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res >= x
    //@ requires res >= x;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:361: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:361:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:92:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res > x
    //@ requires res > x;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:360: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:360:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:91:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res < 1
    //@ requires res < 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:359: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:359:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:90:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res <= 1
    //@ requires res <= 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:358: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:358:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:89:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res == 1
    //@ requires res == 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:357: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:357:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:88:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res != 1
    //@ requires res != 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:356: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:356:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:87:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res >= 1
    //@ requires res >= 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:355: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:355:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:86:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res > 1
    //@ requires res > 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:354: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:354:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:85:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res < 0
    //@ requires res < 0;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:353: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:353:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:84:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res <= 0
    //@ requires res <= 0;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:352: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:352:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:83:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res == 0
    //@ requires res == 0;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:351: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:351:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:82:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res != 0
    //@ requires res != 0;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:350: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:350:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:81:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res >= 0
    //@ requires res >= 0;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:349: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:349:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:80:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res > 0
    //@ requires res > 0;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:348: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:348:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:79:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res < -1
    //@ requires res < -1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:347: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:347:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:78:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res <= -1
    //@ requires res <= -1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:346: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:346:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:77:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res == -1
    //@ requires res == -1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:345: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:345:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:76:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res != -1
    //@ requires res != -1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:344: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:344:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:75:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res >= -1
    //@ requires res >= -1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:343: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:343:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:74:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: res > -1
    //@ requires res > -1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:342: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:342:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:73:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:45: verify: Precondition conjunct is false: i == x
    //@ requires i == x;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:341: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:341:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:72:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:46: verify: Precondition conjunct is false: i >= x
    //@ requires i >= x;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:340: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:340:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:71:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:46: verify: Precondition conjunct is false: i > x
    //@ requires i > x;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:339: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:339:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:70:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:46: verify: Precondition conjunct is false: i < res
    //@ requires i < res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:338: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:338:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:69:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:46: verify: Precondition conjunct is false: i <= res
    //@ requires i <= res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:337: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:337:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:68:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:46: verify: Precondition conjunct is false: i == res
    //@ requires i == res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:336: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:336:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:67:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:46: verify: Precondition conjunct is false: i != res
    //@ requires i != res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:335: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:335:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:66:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:46: verify: Precondition conjunct is false: i >= res
    //@ requires i >= res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:334: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:334:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:65:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:46: verify: Precondition conjunct is false: i > res
    //@ requires i > res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:333: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:333:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:64:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:48: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:332: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:332:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:63:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:49: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:331: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:331:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:62:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:49: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:330: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:330:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:61:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:49: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:329: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:329:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:60:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:50: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:328: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:328:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:59:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:50: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:327: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:327:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:58:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:50: verify: Precondition conjunct is false: i >= 0
    //@ requires i >= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:326: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:326:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:57:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:50: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:325: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:325:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:56:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:50: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:324: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:324:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:55:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:50: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:323: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:323:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:54:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:50: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:322: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:322:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:53:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:50: verify: Precondition conjunct is false: i != -1
    //@ requires i != -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:321: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:321:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:52:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:50: verify: Precondition conjunct is false: i >= -1
    //@ requires i >= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:320: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:320:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:51:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:50: verify: Precondition conjunct is false: i > -1
    //@ requires i > -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:319: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:319:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:161:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:161: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:51: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:318: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:318:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:160:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:160: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:53: verify: Precondition conjunct is false: x != 1
    //@ requires x != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:317: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:317:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:159:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:159: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:54: verify: Precondition conjunct is false: x > 1
    //@ requires x > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:316: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:316:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:158:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:158: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:54: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:315: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:315:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:157:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:157: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:54: verify: Precondition conjunct is false: x <= 0
    //@ requires x <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:314: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:314:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:156:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:156: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:54: verify: Precondition conjunct is false: x == 0
    //@ requires x == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:313: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:313:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:155:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:155: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:57: verify: Precondition conjunct is false: x < -1
    //@ requires x < -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:312: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:312:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:154:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:154: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:57: verify: Precondition conjunct is false: x <= -1
    //@ requires x <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:311: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:311:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:153:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:153: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:57: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:310: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:310:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:152:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:152: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: !neg
    //@ requires !neg;
                 ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:309: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:309:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:151:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:151: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res < x
    //@ requires res < x;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:308: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:308:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:150:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:150: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res <= x
    //@ requires res <= x;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:307: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:307:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:149:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:149: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res == x
    //@ requires res == x;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:306: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:306:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:148:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:148: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res != x
    //@ requires res != x;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:305: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:305:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:147:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:147: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res >= x
    //@ requires res >= x;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:304: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:304:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:146:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res > x
    //@ requires res > x;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:303: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:303:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:145:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res < 1
    //@ requires res < 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:302: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:302:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:144:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:144: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res <= 1
    //@ requires res <= 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:301: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:301:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:143:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res == 1
    //@ requires res == 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:300: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:300:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:142:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:142: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res != 1
    //@ requires res != 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:299: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:299:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:141:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:141: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res >= 1
    //@ requires res >= 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:298: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:298:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:140:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:140: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res > 1
    //@ requires res > 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:297: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:297:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:139:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:139: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res < 0
    //@ requires res < 0;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:296: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:296:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:138:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:138: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res <= 0
    //@ requires res <= 0;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:295: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:295:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:137:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res == 0
    //@ requires res == 0;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:294: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:294:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:136:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:136: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res != 0
    //@ requires res != 0;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:293: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:293:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:135:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:135: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res >= 0
    //@ requires res >= 0;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:292: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:292:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:134:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res > 0
    //@ requires res > 0;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:291: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:291:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:133:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res < -1
    //@ requires res < -1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:290: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:290:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:132:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:132: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res <= -1
    //@ requires res <= -1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:289: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:289:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:131:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res == -1
    //@ requires res == -1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:288: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:288:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:130:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res != -1
    //@ requires res != -1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:287: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:287:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:129:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res >= -1
    //@ requires res >= -1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:286: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:286:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:128:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Precondition conjunct is false: res > -1
    //@ requires res > -1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:285: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:285:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:127:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:63: verify: Precondition conjunct is false: i == x
    //@ requires i == x;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:284: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:284:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:126:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:64: verify: Precondition conjunct is false: i >= x
    //@ requires i >= x;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:283: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:283:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:125:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:64: verify: Precondition conjunct is false: i > x
    //@ requires i > x;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:282: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:282:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:124:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:64: verify: Precondition conjunct is false: i < res
    //@ requires i < res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:281: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:281:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:123:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:64: verify: Precondition conjunct is false: i <= res
    //@ requires i <= res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:280: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:280:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:122:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:64: verify: Precondition conjunct is false: i == res
    //@ requires i == res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:279: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:279:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:121:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:64: verify: Precondition conjunct is false: i != res
    //@ requires i != res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:278: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:278:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:120:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:64: verify: Precondition conjunct is false: i >= res
    //@ requires i >= res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:277: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:277:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:119:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:64: verify: Precondition conjunct is false: i > res
    //@ requires i > res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:276: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:276:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:118:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:66: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:275: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:275:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:117:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:67: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:274: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:274:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:116:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:67: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:273: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:273:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:115:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:67: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:272: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:272:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:114:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:68: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:271: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:271:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:113:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:68: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:270: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:270:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:112:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:68: verify: Precondition conjunct is false: i >= 0
    //@ requires i >= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:269: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:269:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:111:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:68: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:268: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:268:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:110:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:68: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:267: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:267:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:109:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:68: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:266: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:266:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:108:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:68: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:265: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:265:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:107:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:68: verify: Precondition conjunct is false: i != -1
    //@ requires i != -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:264: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:264:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:106:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:68: verify: Precondition conjunct is false: i >= -1
    //@ requires i >= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:263: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:263:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:105:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:68: verify: Precondition conjunct is false: i > -1
    //@ requires i > -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:262: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:262:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:104:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:70: verify: Precondition conjunct is false: j == x
    //@ requires j == x;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:261: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:261:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:103:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:71: verify: Precondition conjunct is false: j >= x
    //@ requires j >= x;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:260: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:260:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:102:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:71: verify: Precondition conjunct is false: j > x
    //@ requires j > x;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:259: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:259:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:101:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:71: verify: Precondition conjunct is false: j < i
    //@ requires j < i;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:258: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:258:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:100:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:71: verify: Precondition conjunct is false: j <= i
    //@ requires j <= i;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:257: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:257:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:99:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:71: verify: Precondition conjunct is false: j == i
    //@ requires j == i;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:256: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:256:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:98:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:71: verify: Precondition conjunct is false: j != i
    //@ requires j != i;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:255: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:255:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:97:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:71: verify: Precondition conjunct is false: j >= i
    //@ requires j >= i;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:254: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:254:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:96:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:71: verify: Precondition conjunct is false: j > i
    //@ requires j > i;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:253: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:253:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:95:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:71: verify: Precondition conjunct is false: j < res
    //@ requires j < res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:252: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:252:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:94:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:71: verify: Precondition conjunct is false: j <= res
    //@ requires j <= res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:251: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:251:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:93:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:71: verify: Precondition conjunct is false: j == res
    //@ requires j == res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:250: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:250:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:92:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:71: verify: Precondition conjunct is false: j != res
    //@ requires j != res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:249: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:249:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:91:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:71: verify: Precondition conjunct is false: j >= res
    //@ requires j >= res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:248: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:248:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:90:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:71: verify: Precondition conjunct is false: j > res
    //@ requires j > res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:247: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:247:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:89:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:73: verify: Precondition conjunct is false: j == 1
    //@ requires j == 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:246: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:246:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:88:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:74: verify: Precondition conjunct is false: j >= 1
    //@ requires j >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:245: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:245:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:87:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:74: verify: Precondition conjunct is false: j > 1
    //@ requires j > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:244: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:244:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:86:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:74: verify: Precondition conjunct is false: j < 0
    //@ requires j < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:243: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:243:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:85:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:75: verify: Precondition conjunct is false: j == 0
    //@ requires j == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:242: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:242:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:84:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:75: verify: Precondition conjunct is false: j != 0
    //@ requires j != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:241: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:241:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:83:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:75: verify: Precondition conjunct is false: j >= 0
    //@ requires j >= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:240: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:240:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:82:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:75: verify: Precondition conjunct is false: j > 0
    //@ requires j > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:239: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:239:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:81:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:75: verify: Precondition conjunct is false: j < -1
    //@ requires j < -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:238: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:238:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:80:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:75: verify: Precondition conjunct is false: j <= -1
    //@ requires j <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:237: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:237:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:79:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:75: verify: Precondition conjunct is false: j == -1
    //@ requires j == -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:236: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:236:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:78:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:75: verify: Precondition conjunct is false: j != -1
    //@ requires j != -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:235: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:235:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:77:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:75: verify: Precondition conjunct is false: j >= -1
    //@ requires j >= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:234: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:234:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:76:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:23:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:75: verify: Precondition conjunct is false: j > -1
    //@ requires j > -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:233: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:233:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:228:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:228: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:76: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:232: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:232:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:227:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:227: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:78: verify: Precondition conjunct is false: x != 1
    //@ requires x != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:231: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:231:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:226:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:226: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:79: verify: Precondition conjunct is false: x > 1
    //@ requires x > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:230: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:230:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:225:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:225: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:79: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:229: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:229:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:224:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:224: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:79: verify: Precondition conjunct is false: x <= 0
    //@ requires x <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:228: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:228:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:223:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:223: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:79: verify: Precondition conjunct is false: x == 0
    //@ requires x == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:227: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:227:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:222:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:222: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:82: verify: Precondition conjunct is false: x < -1
    //@ requires x < -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:226: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:226:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:221:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:221: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:82: verify: Precondition conjunct is false: x <= -1
    //@ requires x <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:225: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:225:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:220:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:220: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:82: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:224: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:224:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires !neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:219:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:219: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:86: verify: Precondition conjunct is false: !neg
    //@ requires !neg;
                 ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:223: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:223:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:218:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:218: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:86: verify: Precondition conjunct is false: res < x
    //@ requires res < x;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:222: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:222:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:217:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:217: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:87: verify: Precondition conjunct is false: res == x
    //@ requires res == x;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:221: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:221:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:216:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:216: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:87: verify: Precondition conjunct is false: res != x
    //@ requires res != x;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:220: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:220:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:215:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:215: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:87: verify: Precondition conjunct is false: res >= x
    //@ requires res >= x;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:219: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:219:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:214:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:214: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:87: verify: Precondition conjunct is false: res > x
    //@ requires res > x;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:218: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:218:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:213:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:213: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:87: verify: Precondition conjunct is false: res < 1
    //@ requires res < 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:217: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:217:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:212:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:212: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:88: verify: Precondition conjunct is false: res == 1
    //@ requires res == 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:216: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:216:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:211:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:88: verify: Precondition conjunct is false: res != 1
    //@ requires res != 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:215: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:215:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:210:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:210: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:88: verify: Precondition conjunct is false: res >= 1
    //@ requires res >= 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:214: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:214:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:209:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:209: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:88: verify: Precondition conjunct is false: res > 1
    //@ requires res > 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:213: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:213:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:208:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:208: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:88: verify: Precondition conjunct is false: res < 0
    //@ requires res < 0;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:212:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:207:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:207: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:88: verify: Precondition conjunct is false: res <= 0
    //@ requires res <= 0;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:211: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:211:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:206:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:206: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:88: verify: Precondition conjunct is false: res == 0
    //@ requires res == 0;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:210: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:210:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:205:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:205: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:88: verify: Precondition conjunct is false: res != 0
    //@ requires res != 0;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:209: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:209:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:204:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:204: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:88: verify: Precondition conjunct is false: res >= 0
    //@ requires res >= 0;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:208: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:208:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:203:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:203: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:88: verify: Precondition conjunct is false: res > 0
    //@ requires res > 0;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:207: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:207:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:202:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:202: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:88: verify: Precondition conjunct is false: res < -1
    //@ requires res < -1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:206: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:206:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:201:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:201: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:88: verify: Precondition conjunct is false: res <= -1
    //@ requires res <= -1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:205: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:205:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:200:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:200: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:88: verify: Precondition conjunct is false: res == -1
    //@ requires res == -1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:204: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:204:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:199:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:199: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:88: verify: Precondition conjunct is false: res != -1
    //@ requires res != -1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:203: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:203:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:198:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:198: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:88: verify: Precondition conjunct is false: res >= -1
    //@ requires res >= -1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:202: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:202:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:197:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:197: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:88: verify: Precondition conjunct is false: res > -1
    //@ requires res > -1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:201: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:201:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:196:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:196: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:90: verify: Precondition conjunct is false: i == x
    //@ requires i == x;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:200: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:200:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:195:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:195: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:91: verify: Precondition conjunct is false: i >= x
    //@ requires i >= x;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:199: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:199:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:194:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:194: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:91: verify: Precondition conjunct is false: i > x
    //@ requires i > x;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:198: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:198:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:193:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:193: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:91: verify: Precondition conjunct is false: i < res
    //@ requires i < res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:197: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:197:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:192:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:192: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:91: verify: Precondition conjunct is false: i <= res
    //@ requires i <= res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:196: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:196:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:191:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:191: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:91: verify: Precondition conjunct is false: i == res
    //@ requires i == res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:195: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:195:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:190:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:190: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:91: verify: Precondition conjunct is false: i != res
    //@ requires i != res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:194: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:194:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:189:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:189: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:91: verify: Precondition conjunct is false: i >= res
    //@ requires i >= res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:193: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:193:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:188:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:188: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:91: verify: Precondition conjunct is false: i > res
    //@ requires i > res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:192: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:192:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:187:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:187: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:93: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:191: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:191:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:186:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:186: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:94: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:190: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:190:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:185:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:185: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:94: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:189: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:189:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:184:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:184: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:94: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:188: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:188:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:183:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:183: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:95: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:187: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:187:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:182:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:182: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:95: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:186: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:186:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:181:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:181: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:95: verify: Precondition conjunct is false: i >= 0
    //@ requires i >= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:185: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:185:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:180:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:180: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:95: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:184: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:184:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:179:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:179: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:95: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:183: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:183:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:178:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:178: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:95: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:182: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:182:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:177:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:177: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:95: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:181: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:181:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:176:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:176: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:95: verify: Precondition conjunct is false: i != -1
    //@ requires i != -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:180: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:180:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:175:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:175: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:95: verify: Precondition conjunct is false: i >= -1
    //@ requires i >= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:179: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:179:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:174:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:174: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:95: verify: Precondition conjunct is false: i > -1
    //@ requires i > -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:178: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:178:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:173:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:173: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:97: verify: Precondition conjunct is false: j == x
    //@ requires j == x;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:177: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:177:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:172:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:172: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:98: verify: Precondition conjunct is false: j >= x
    //@ requires j >= x;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:176: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:176:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:171:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:171: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:98: verify: Precondition conjunct is false: j > x
    //@ requires j > x;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:175: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:175:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:170:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:170: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:98: verify: Precondition conjunct is false: j < i
    //@ requires j < i;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:174: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:174:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:169:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:169: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:98: verify: Precondition conjunct is false: j <= i
    //@ requires j <= i;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:173: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:173:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:168:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:168: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:98: verify: Precondition conjunct is false: j == i
    //@ requires j == i;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:172: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:172:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:167:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:167: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:98: verify: Precondition conjunct is false: j != i
    //@ requires j != i;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:171: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:171:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:166:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:166: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:98: verify: Precondition conjunct is false: j >= i
    //@ requires j >= i;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:170: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:170:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:165:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:165: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:98: verify: Precondition conjunct is false: j > i
    //@ requires j > i;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:169: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:169:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:164:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:164: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:98: verify: Precondition conjunct is false: j < res
    //@ requires j < res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:168: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:168:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:163:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:163: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:98: verify: Precondition conjunct is false: j <= res
    //@ requires j <= res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:167: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:167:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:162:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:162: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:98: verify: Precondition conjunct is false: j == res
    //@ requires j == res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:166: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:166:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:161:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:161: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:98: verify: Precondition conjunct is false: j != res
    //@ requires j != res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:165: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:165:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:160:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:160: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:98: verify: Precondition conjunct is false: j >= res
    //@ requires j >= res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:164: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:164:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:159:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:159: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:98: verify: Precondition conjunct is false: j > res
    //@ requires j > res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:163: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:163:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:158:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:158: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:100: verify: Precondition conjunct is false: j == 1
    //@ requires j == 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:162: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:162:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:157:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:157: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:101: verify: Precondition conjunct is false: j >= 1
    //@ requires j >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:161: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:161:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:156:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:156: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:101: verify: Precondition conjunct is false: j > 1
    //@ requires j > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:160: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:160:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:155:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:155: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:101: verify: Precondition conjunct is false: j < 0
    //@ requires j < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:159: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:159:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:154:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:154: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:102: verify: Precondition conjunct is false: j == 0
    //@ requires j == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:158:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:153:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:153: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:102: verify: Precondition conjunct is false: j != 0
    //@ requires j != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:157: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:157:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:152:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:152: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:102: verify: Precondition conjunct is false: j >= 0
    //@ requires j >= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:156: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:156:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:151:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:151: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:102: verify: Precondition conjunct is false: j > 0
    //@ requires j > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:155: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:155:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:150:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:150: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:102: verify: Precondition conjunct is false: j < -1
    //@ requires j < -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:154: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:154:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:149:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:149: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:102: verify: Precondition conjunct is false: j <= -1
    //@ requires j <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:153: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:153:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:148:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:148: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:102: verify: Precondition conjunct is false: j == -1
    //@ requires j == -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:152: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:152:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:147:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:147: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:102: verify: Precondition conjunct is false: j != -1
    //@ requires j != -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:151: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:151:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:146:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:102: verify: Precondition conjunct is false: j >= -1
    //@ requires j >= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:150: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:150:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j > -1;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:145:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:102: verify: Precondition conjunct is false: j > -1
    //@ requires j > -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:149: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:149:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k == x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:144:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:144: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:104: verify: Precondition conjunct is false: k == x
    //@ requires k == x;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:148: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:148:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k >= x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:143:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Precondition conjunct is false: k >= x
    //@ requires k >= x;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:147: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:147:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k > x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:142:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:142: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Precondition conjunct is false: k > x
    //@ requires k > x;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:146: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:146:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < j;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:141:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:141: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Precondition conjunct is false: k < j
    //@ requires k < j;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:145: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:145:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k <= j;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:140:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:140: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Precondition conjunct is false: k <= j
    //@ requires k <= j;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:144: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:144:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k == j;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:139:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:139: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Precondition conjunct is false: k == j
    //@ requires k == j;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:143: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:143:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k != j;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:138:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:138: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Precondition conjunct is false: k != j
    //@ requires k != j;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:142: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:142:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k >= j;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:137:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Precondition conjunct is false: k >= j
    //@ requires k >= j;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:141: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:141:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k > j;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:136:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:136: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Precondition conjunct is false: k > j
    //@ requires k > j;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:140: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:140:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < i;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:135:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:135: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Precondition conjunct is false: k < i
    //@ requires k < i;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:139: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:139:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k <= i;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:134:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Precondition conjunct is false: k <= i
    //@ requires k <= i;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:138: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:138:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k == i;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:133:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Precondition conjunct is false: k == i
    //@ requires k == i;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:137: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:137:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k != i;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:132:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:132: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Precondition conjunct is false: k != i
    //@ requires k != i;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:136: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:136:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k >= i;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:131:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Precondition conjunct is false: k >= i
    //@ requires k >= i;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:135: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:135:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k > i;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:130:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Precondition conjunct is false: k > i
    //@ requires k > i;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:134: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:134:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < res;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:129:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Precondition conjunct is false: k < res
    //@ requires k < res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:133: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:133:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k <= res;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:128:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Precondition conjunct is false: k <= res
    //@ requires k <= res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:132: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:132:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k == res;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:127:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Precondition conjunct is false: k == res
    //@ requires k == res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:131: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:131:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k != res;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:126:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Precondition conjunct is false: k != res
    //@ requires k != res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:130: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:130:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k >= res;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:125:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Precondition conjunct is false: k >= res
    //@ requires k >= res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:129: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:129:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k > res;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:124:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: Precondition conjunct is false: k > res
    //@ requires k > res;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:128: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:128:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:123:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:107: verify: Precondition conjunct is false: k == 1
    //@ requires k == 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:127: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:127:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:122:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:108: verify: Precondition conjunct is false: k >= 1
    //@ requires k >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:126: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:126:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:121:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:108: verify: Precondition conjunct is false: k > 1
    //@ requires k > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:125: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:125:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:120:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:108: verify: Precondition conjunct is false: k < 0
    //@ requires k < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:124: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:124:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:119:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:109: verify: Precondition conjunct is false: k == 0
    //@ requires k == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:123: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:123:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:118:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:109: verify: Precondition conjunct is false: k != 0
    //@ requires k != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:122: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:122:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:117:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:109: verify: Precondition conjunct is false: k >= 0
    //@ requires k >= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:121: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:121:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    //@ requires k > 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:116:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:109: verify: Precondition conjunct is false: k > 0
    //@ requires k > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:120: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:120:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:115:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:109: verify: Precondition conjunct is false: k < -1
    //@ requires k < -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:119: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:119:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:114:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:109: verify: Precondition conjunct is false: k <= -1
    //@ requires k <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:118: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:118:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:113:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:109: verify: Precondition conjunct is false: k == -1
    //@ requires k == -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:117: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:117:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:112:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:109: verify: Precondition conjunct is false: k != -1
    //@ requires k != -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:116: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:116:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:111:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:109: verify: Precondition conjunct is false: k >= -1
    //@ requires k >= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:115: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:115:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:110:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:109: verify: Precondition conjunct is false: k > -1
    //@ requires k > -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:114: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:114:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= x;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:109:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:86: verify: Precondition conjunct is false: res <= x
    //@ requires res <= x;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:113: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:113:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires res <= 1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:108:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:26:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:86: verify: Precondition conjunct is false: res <= 1
    //@ requires res <= 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:112: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:112:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:111: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:13:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:111:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
3 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x >= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:110: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:12:) in method main
        cubeOf(-3);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:110:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Precondition conjunct is false: x >= -1
    //@ requires x >= -1;
                   ^
3 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:48:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:19:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:31: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:110: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:110:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:47:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:19:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:31: verify: Precondition conjunct is false: x == 1
    //@ requires x == 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:109: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:109:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:46:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:19:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:42: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:108: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:108:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:45:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:19:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:42: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:107: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:107:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i != 1;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:44:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:19:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:42: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:106: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:106:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i <= 0;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:43:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:19:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:42: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:105: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:105:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:67:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:104: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:104:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:66:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:43: verify: Precondition conjunct is false: x == 1
    //@ requires x == 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:103: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:103:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:65:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:54: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:102: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:102:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:64:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:54: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:101: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:101:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:63:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:54: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:100: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:100:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:62:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:54: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:99: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:99:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:61:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:57: verify: Precondition conjunct is false: j < 1
    //@ requires j < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:98: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:98:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:60:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:57: verify: Precondition conjunct is false: j <= 1
    //@ requires j <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:97: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:97:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j != 1;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:59:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:57: verify: Precondition conjunct is false: j != 1
    //@ requires j != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:96: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:96:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j <= 0;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:58:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:21:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:57: verify: Precondition conjunct is false: j <= 0
    //@ requires j <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:95: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:95:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:89:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:24:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:58: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:94: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:94:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:88:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:24:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:58: verify: Precondition conjunct is false: x == 1
    //@ requires x == 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:93: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:93:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:87:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:24:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:69: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:92: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:92:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:86:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:24:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:69: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:91: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:91:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:85:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:24:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:69: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:90:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i <= 0;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:84:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:24:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:69: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:89: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:89:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:83:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:24:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:72: verify: Precondition conjunct is false: j < 1
    //@ requires j < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:88: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:88:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:82:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:24:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:72: verify: Precondition conjunct is false: j <= 1
    //@ requires j <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:87: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:87:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:81:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:24:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:72: verify: Precondition conjunct is false: j != 1
    //@ requires j != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:86: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:86:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j <= 0;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:80:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:24:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:72: verify: Precondition conjunct is false: j <= 0
    //@ requires j <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:85: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:85:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:79:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:24:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:75: verify: Precondition conjunct is false: k < 1
    //@ requires k < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:84:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k <= 1;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:78:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:24:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:75: verify: Precondition conjunct is false: k <= 1
    //@ requires k <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:83: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:83:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k != 1;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:77:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:24:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:75: verify: Precondition conjunct is false: k != 1
    //@ requires k != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:82:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    //@ requires k <= 0;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:76:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:24:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:75: verify: Precondition conjunct is false: k <= 0
    //@ requires k <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:81: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:81:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:80: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:11:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:80:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
3 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:79: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:10:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:79:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:7: verify: Precondition conjunct is false: x != 0
    //@ requires x != 0;
                   ^
3 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    //@ requires x <= -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:9:) in method main
        cubeOf(0);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:78:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:7: verify: Precondition conjunct is false: x <= -1
    //@ requires x <= -1;
                   ^
3 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:7:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:25:
    //@ ensures x >= 0 ==> \result >= 0;
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:8:) in method main
        cubeOf(1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:78:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:3: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
5 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:38:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:15:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:27: verify: Precondition conjunct is false: x >= 1
    //@ requires x >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:77: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:7:) in method main
        cubeOf(1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:77:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:3: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:37:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:15:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:27: verify: Precondition conjunct is false: x != 0
    //@ requires x != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:76: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:7:) in method main
        cubeOf(1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:76:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:3: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:36:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:15:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:28: verify: Precondition conjunct is false: x > 0
    //@ requires x > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:7:) in method main
        cubeOf(1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:75:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:3: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:35:) in method cubeOf
            __Loop_Invariant_Dummy1(x, neg, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:15:
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:31: verify: Precondition conjunct is false: neg
    //@ requires neg;
                 ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:7:) in method main
        cubeOf(1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:74:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:3: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:49:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:17:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:35: verify: Precondition conjunct is false: x >= 1
    //@ requires x >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:73: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:7:) in method main
        cubeOf(1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:73:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:3: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:48:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:17:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:35: verify: Precondition conjunct is false: x != 0
    //@ requires x != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:7:) in method main
        cubeOf(1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:72:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:3: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:47:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:17:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:36: verify: Precondition conjunct is false: x > 0
    //@ requires x > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:71: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:7:) in method main
        cubeOf(1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:71:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:3: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:46:) in method cubeOf
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:17:
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:39: verify: Precondition conjunct is false: neg
    //@ requires neg;
                 ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:70: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:7:) in method main
        cubeOf(1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:70:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:3: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:63:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:20:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:46: verify: Precondition conjunct is false: x >= 1
    //@ requires x >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:7:) in method main
        cubeOf(1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:69:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:3: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:62:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:20:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:46: verify: Precondition conjunct is false: x != 0
    //@ requires x != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:7:) in method main
        cubeOf(1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:68:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:3: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:61:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:20:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:47: verify: Precondition conjunct is false: x > 0
    //@ requires x > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:7:) in method main
        cubeOf(1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:67:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:3: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires neg;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:60:) in method cubeOf
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                                           ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:20:
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:50: verify: Precondition conjunct is false: neg
    //@ requires neg;
                 ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:66: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:7:) in method main
        cubeOf(1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:66:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:3: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
6 verification failures

public class IntCube {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:7:) in method main
        cubeOf(1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:65:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:3: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
3 verification failures

public class IntCube {

    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:6:) in method main
        cubeOf(1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:64:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:4: verify: Precondition conjunct is false: x != 1
    //@ requires x != 1;
                   ^
3 verification failures

public class IntCube {

    //@ requires x <= 1;
    //@ requires x <= 0;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:63: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:5:) in method main
        cubeOf(1);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:63:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:4: verify: Precondition conjunct is false: x <= 0
    //@ requires x <= 0;
                   ^
3 verification failures

public class IntCube {

    //@ requires x <= 1;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntCube.java:63: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:4:) in method main
        cubeOf(2);
              ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:63:
    public static int cubeOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:3: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
3 verification failures

public class IntCube {

    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, neg, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, neg, res, i, j);
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                    __Loop_Invariant_Dummy3(x, neg, res, i, j, k);
                }
            }
        }
        return (neg ? -res : res);
    }

    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, boolean neg, int res, int i) {}
    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, boolean neg, int res, int i, int j) {}
    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires k < x;
    //@ requires k <= x;
    //@ requires k != x;
    public static void __Loop_Invariant_Dummy3(int x, boolean neg, int res, int i, int j, int k) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        cubeOf(-1);
        cubeOf(-3);
        cubeOf(0);
        cubeOf(1);
        cubeOf(2);
        cubeOf(3);
    }
}


