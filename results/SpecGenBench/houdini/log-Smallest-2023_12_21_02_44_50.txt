public class Smallest {

    //@ non_null
    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ non_null
    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:3: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:107: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
2 errors

public class Smallest {

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ non_null
    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:106: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
1 error

public class Smallest {

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:249: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:89:) in method main
        Smallest(arr);
                ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:249:
    static public int Smallest(int[] a) {
                      ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:3: verify: Precondition conjunct is false: 6 < a.length
    //@ requires 6 < a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:248: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:88:) in method main
        Smallest(arr);
                ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:248:
    static public int Smallest(int[] a) {
                      ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:3: verify: Precondition conjunct is false: 6 <= a.length
    //@ requires 6 <= a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:247: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:87:) in method main
        Smallest(arr);
                ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:247:
    static public int Smallest(int[] a) {
                      ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:3: verify: Precondition conjunct is false: 6 == a.length
    //@ requires 6 == a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:246: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:86:) in method main
        Smallest(arr);
                ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:246:
    static public int Smallest(int[] a) {
                      ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:6: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:245: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:85:) in method main
        Smallest(arr);
                ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:245:
    static public int Smallest(int[] a) {
                      ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:8: verify: Precondition conjunct is false: 5 != a.length
    //@ requires 5 != a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:244: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:) in method main
        Smallest(arr);
                ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:244:
    static public int Smallest(int[] a) {
                      ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:9: verify: Precondition conjunct is false: 5 > a.length
    //@ requires 5 > a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:243: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:83:) in method main
        Smallest(arr);
                ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:243:
    static public int Smallest(int[] a) {
                      ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:11: verify: Precondition conjunct is false: 4 == a.length
    //@ requires 4 == a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:242: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:82:) in method main
        Smallest(arr);
                ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:242:
    static public int Smallest(int[] a) {
                      ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:12: verify: Precondition conjunct is false: 4 >= a.length
    //@ requires 4 >= a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:241: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:81:) in method main
        Smallest(arr);
                ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:241:
    static public int Smallest(int[] a) {
                      ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:12: verify: Precondition conjunct is false: 4 > a.length
    //@ requires 4 > a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:240: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:80:) in method main
        Smallest(arr);
                ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:240:
    static public int Smallest(int[] a) {
                      ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:14: verify: Precondition conjunct is false: 2 == a.length
    //@ requires 2 == a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:239: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:79:) in method main
        Smallest(arr);
                ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:239:
    static public int Smallest(int[] a) {
                      ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:15: verify: Precondition conjunct is false: 2 >= a.length
    //@ requires 2 >= a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:238: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:78:) in method main
        Smallest(arr);
                ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:238:
    static public int Smallest(int[] a) {
                      ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:15: verify: Precondition conjunct is false: 2 > a.length
    //@ requires 2 > a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:237: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:77:) in method main
        Smallest(arr);
                ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:237:
    static public int Smallest(int[] a) {
                      ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:17: verify: Precondition conjunct is false: 1 == a.length
    //@ requires 1 == a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:236: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:76:) in method main
        Smallest(arr);
                ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:236:
    static public int Smallest(int[] a) {
                      ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:18: verify: Precondition conjunct is false: 1 >= a.length
    //@ requires 1 >= a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:235: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:75:) in method main
        Smallest(arr);
                ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:235:
    static public int Smallest(int[] a) {
                      ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:18: verify: Precondition conjunct is false: 1 > a.length
    //@ requires 1 > a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:234: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:74:) in method main
        Smallest(arr);
                ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:234:
    static public int Smallest(int[] a) {
                      ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:20: verify: Precondition conjunct is false: -1 == a.length
    //@ requires -1 == a.length;
                    ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:233: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:73:) in method main
        Smallest(arr);
                ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:233:
    static public int Smallest(int[] a) {
                      ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:21: verify: Precondition conjunct is false: -1 >= a.length
    //@ requires -1 >= a.length;
                    ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires -1 > a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:232: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:72:) in method main
        Smallest(arr);
                ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:232:
    static public int Smallest(int[] a) {
                      ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:21: verify: Precondition conjunct is false: -1 > a.length
    //@ requires -1 > a.length;
                    ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 < a.length;
    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:226:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:226: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:88: verify: Precondition conjunct is false: 6 < a.length
    //@ requires 6 < a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 <= a.length;
    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:225:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:225: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:88: verify: Precondition conjunct is false: 6 <= a.length
    //@ requires 6 <= a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 == a.length;
    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:224:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:224: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:88: verify: Precondition conjunct is false: 6 == a.length
    //@ requires 6 == a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:223:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:223: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:91: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:222:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:222: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:93: verify: Precondition conjunct is false: 5 != a.length
    //@ requires 5 != a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:221:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:221: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:94: verify: Precondition conjunct is false: 5 > a.length
    //@ requires 5 > a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 == a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:220:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:220: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:96: verify: Precondition conjunct is false: 4 == a.length
    //@ requires 4 == a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 4 >= a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:219:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:219: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:97: verify: Precondition conjunct is false: 4 >= a.length
    //@ requires 4 >= a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 4 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:218:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:218: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:97: verify: Precondition conjunct is false: 4 > a.length
    //@ requires 4 > a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:217:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:217: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:99: verify: Precondition conjunct is false: 2 == a.length
    //@ requires 2 == a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:216:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:216: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:100: verify: Precondition conjunct is false: 2 >= a.length
    //@ requires 2 >= a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:215:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:215: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:100: verify: Precondition conjunct is false: 2 > a.length
    //@ requires 2 > a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:214:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:214: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:102: verify: Precondition conjunct is false: 1 == a.length
    //@ requires 1 == a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:213:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:213: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:103: verify: Precondition conjunct is false: 1 >= a.length
    //@ requires 1 >= a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:212:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:212: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:103: verify: Precondition conjunct is false: 1 > a.length
    //@ requires 1 > a.length;
                   ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:211:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:105: verify: Precondition conjunct is false: -1 == a.length
    //@ requires -1 == a.length;
                    ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:210:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:210: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: -1 >= a.length
    //@ requires -1 >= a.length;
                    ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires -1 > a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:209:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:209: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: -1 > a.length
    //@ requires -1 > a.length;
                    ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index < 6;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:208:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:208: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index < 6
    //@ requires index < 6;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index <= 6;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:207:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:207: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index <= 6
    //@ requires index <= 6;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index == 6;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:206:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:206: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index == 6
    //@ requires index == 6;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index != 6;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:205:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:205: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index != 6
    //@ requires index != 6;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= 6;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:204:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:204: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index >= 6
    //@ requires index >= 6;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index > 6;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:203:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:203: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index > 6
    //@ requires index > 6;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index < a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:202:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:202: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index < a.length
    //@ requires index < a.length;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index <= a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:201:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:201: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index <= a.length
    //@ requires index <= a.length;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index == a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:200:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:200: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index == a.length
    //@ requires index == a.length;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:199:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:199: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index != a.length
    //@ requires index != a.length;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index > a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:198:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:198: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:107: verify: Precondition conjunct is false: index > a.length
    //@ requires index > a.length;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:197:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:197: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:107: verify: Precondition conjunct is false: index < 5
    //@ requires index < 5;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:196:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:196: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:107: verify: Precondition conjunct is false: index <= 5
    //@ requires index <= 5;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:195:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:195: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:107: verify: Precondition conjunct is false: index == 5
    //@ requires index == 5;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:194:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:194: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:107: verify: Precondition conjunct is false: index != 5
    //@ requires index != 5;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:193:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:193: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:108: verify: Precondition conjunct is false: index > 5
    //@ requires index > 5;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:192:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:192: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:108: verify: Precondition conjunct is false: index < 4
    //@ requires index < 4;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:191:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:191: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:108: verify: Precondition conjunct is false: index <= 4
    //@ requires index <= 4;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:190:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:190: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:108: verify: Precondition conjunct is false: index == 4
    //@ requires index == 4;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:189:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:189: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:111: verify: Precondition conjunct is false: index < 2
    //@ requires index < 2;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:188:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:188: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:111: verify: Precondition conjunct is false: index <= 2
    //@ requires index <= 2;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:187:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:187: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:111: verify: Precondition conjunct is false: index == 2
    //@ requires index == 2;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:186:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:186: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:114: verify: Precondition conjunct is false: index < 1
    //@ requires index < 1;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:185:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:185: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:114: verify: Precondition conjunct is false: index <= 1
    //@ requires index <= 1;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:184:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:184: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:114: verify: Precondition conjunct is false: index == 1
    //@ requires index == 1;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:183:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:183: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:117: verify: Precondition conjunct is false: index < 0
    //@ requires index < 0;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:182:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:182: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:117: verify: Precondition conjunct is false: index <= 0
    //@ requires index <= 0;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:181:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:181: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:117: verify: Precondition conjunct is false: index == 0
    //@ requires index == 0;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:180:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:180: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:120: verify: Precondition conjunct is false: index < -1
    //@ requires index < -1;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:179:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:179: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:120: verify: Precondition conjunct is false: index <= -1
    //@ requires index <= -1;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:178:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:178: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:120: verify: Precondition conjunct is false: index == -1
    //@ requires index == -1;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:177:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:177: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest < -1
    //@ requires smallest < -1;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest <= -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:176:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:176: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest <= -1
    //@ requires smallest <= -1;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest == -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:175:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:175: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest == -1
    //@ requires smallest == -1;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest != -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:174:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:174: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest != -1
    //@ requires smallest != -1;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest >= -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:173:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:173: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest >= -1
    //@ requires smallest >= -1;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:172:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:172: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest > -1
    //@ requires smallest > -1;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < index;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:171:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:171: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest < index
    //@ requires smallest < index;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest <= index;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:170:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:170: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest <= index
    //@ requires smallest <= index;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest == index;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:169:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:169: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest == index
    //@ requires smallest == index;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest != index;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:168:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:168: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest != index
    //@ requires smallest != index;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest >= index;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:167:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:167: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest >= index
    //@ requires smallest >= index;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest > index;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:166:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:166: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest > index
    //@ requires smallest > index;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < 6;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:165:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:165: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest < 6
    //@ requires smallest < 6;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest <= 6;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:164:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:164: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest <= 6
    //@ requires smallest <= 6;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest == 6;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:163:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:163: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest == 6
    //@ requires smallest == 6;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest != 6;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:162:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:162: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest != 6
    //@ requires smallest != 6;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest >= 6;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:161:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:161: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest >= 6
    //@ requires smallest >= 6;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest > 6;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:160:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:160: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest > 6
    //@ requires smallest > 6;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < 5;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:159:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:159: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest < 5
    //@ requires smallest < 5;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest <= 5;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:158:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:158: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest <= 5
    //@ requires smallest <= 5;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest == 5;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:157:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:157: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest == 5
    //@ requires smallest == 5;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest != 5;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:156:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:156: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest != 5
    //@ requires smallest != 5;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest >= 5;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:155:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:155: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest >= 5
    //@ requires smallest >= 5;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest > 5;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:154:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:154: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest > 5
    //@ requires smallest > 5;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < 4;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:153:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:153: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest < 4
    //@ requires smallest < 4;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest <= 4;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:152:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:152: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest <= 4
    //@ requires smallest <= 4;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest == 4;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:151:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:151: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest == 4
    //@ requires smallest == 4;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest != 4;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:150:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:150: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest != 4
    //@ requires smallest != 4;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest >= 4;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:149:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:149: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest >= 4
    //@ requires smallest >= 4;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest > 4;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:148:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:148: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest > 4
    //@ requires smallest > 4;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < a.length;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:147:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:147: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest < a.length
    //@ requires smallest < a.length;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest <= a.length;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:146:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest <= a.length
    //@ requires smallest <= a.length;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest == a.length;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:145:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest == a.length
    //@ requires smallest == a.length;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest != a.length;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:144:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:144: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest != a.length
    //@ requires smallest != a.length;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest >= a.length;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:143:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest >= a.length
    //@ requires smallest >= a.length;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest > a.length;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:142:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:142: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest > a.length
    //@ requires smallest > a.length;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < 2;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:141:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:141: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest < 2
    //@ requires smallest < 2;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest <= 2;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:140:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:140: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest <= 2
    //@ requires smallest <= 2;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest == 2;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:139:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:139: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest == 2
    //@ requires smallest == 2;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest != 2;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:138:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:138: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest != 2
    //@ requires smallest != 2;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest >= 2;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:137:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest >= 2
    //@ requires smallest >= 2;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest > 2;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:136:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:136: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest > 2
    //@ requires smallest > 2;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < 1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:135:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:135: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest < 1
    //@ requires smallest < 1;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest <= 1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:134:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest <= 1
    //@ requires smallest <= 1;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest == 1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:133:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest == 1
    //@ requires smallest == 1;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest != 1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:132:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:132: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest != 1
    //@ requires smallest != 1;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest >= 1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:131:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest >= 1
    //@ requires smallest >= 1;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest > 1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:130:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest > 1
    //@ requires smallest > 1;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest < 0;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:129:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest < 0
    //@ requires smallest < 0;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest <= 0;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:128:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest <= 0
    //@ requires smallest <= 0;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest == 0;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:127:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest == 0
    //@ requires smallest == 0;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest != 0;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:126:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest != 0
    //@ requires smallest != 0;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest >= 0;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:125:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest >= 0
    //@ requires smallest >= 0;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    //@ requires smallest > 0;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:124:) in method Smallest
        __Loop_Invariant_Dummy1(a, index, smallest);
                               ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:84:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Precondition conjunct is false: smallest > 0
    //@ requires smallest > 0;
                          ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:123:) in method Smallest
            __Loop_Invariant_Dummy1(a, index, smallest);
                                   ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:78:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index >= a.length
    //@ requires index >= a.length;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= 5;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:122:) in method Smallest
            __Loop_Invariant_Dummy1(a, index, smallest);
                                   ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:78:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index >= 5
    //@ requires index >= 5;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:121:) in method Smallest
            __Loop_Invariant_Dummy1(a, index, smallest);
                                   ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:78:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index != 4
    //@ requires index != 4;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:120:) in method Smallest
            __Loop_Invariant_Dummy1(a, index, smallest);
                                   ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:78:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index >= 4
    //@ requires index >= 4;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index > 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:119:) in method Smallest
            __Loop_Invariant_Dummy1(a, index, smallest);
                                   ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:78:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index > 4
    //@ requires index > 4;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:118:) in method Smallest
            __Loop_Invariant_Dummy1(a, index, smallest);
                                   ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:78:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index != 2
    //@ requires index != 2;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:117:) in method Smallest
            __Loop_Invariant_Dummy1(a, index, smallest);
                                   ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:78:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index >= 2
    //@ requires index >= 2;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index > 2;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:116:) in method Smallest
            __Loop_Invariant_Dummy1(a, index, smallest);
                                   ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:78:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index > 2
    //@ requires index > 2;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:115:) in method Smallest
            __Loop_Invariant_Dummy1(a, index, smallest);
                                   ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:78:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index != 1
    //@ requires index != 1;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:114:) in method Smallest
            __Loop_Invariant_Dummy1(a, index, smallest);
                                   ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:78:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index >= 1
    //@ requires index >= 1;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index > 1;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:113:) in method Smallest
            __Loop_Invariant_Dummy1(a, index, smallest);
                                   ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:78:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index > 1
    //@ requires index > 1;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:112:) in method Smallest
            __Loop_Invariant_Dummy1(a, index, smallest);
                                   ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:78:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:106: verify: Precondition conjunct is false: index != 0
    //@ requires index != 0;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Smallest.java:111:) in method Smallest
            __Loop_Invariant_Dummy1(a, index, smallest);
                                   ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Smallest.java:78:
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Smallest.java:107: verify: Precondition conjunct is false: index > 0
    //@ requires index > 0;
                       ^
3 verification failures

public class Smallest {

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < a.length;
    //@ ensures \result <= a.length;
    //@ ensures \result == a.length;
    //@ ensures \result != a.length;
    //@ ensures \result >= a.length;
    //@ ensures \result > a.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a == null ==> \result >= 0;
    //@ ensures a != null ==> \result >= 0;
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, smallest);
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        __Loop_Invariant_Dummy1(a, index, smallest);
        return smallest;
    }

    //@ requires 6 != a.length;
    //@ requires 6 >= a.length;
    //@ requires 6 > a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 4 < a.length;
    //@ requires 4 <= a.length;
    //@ requires 4 != a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires index >= 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int smallest) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        Smallest(arr);
        arr = new int[]{};
        Smallest(arr);
        arr = new int[]{0};
        Smallest(arr);
        arr = new int[]{-2, -1};
        Smallest(arr);
        arr = new int[]{2, 3};
        Smallest(arr);
        arr = new int[]{0, -1};
        Smallest(arr);
        arr = new int[]{-2, -3, -114, 114};
        Smallest(arr);
        arr = new int[]{-2, -3, 245, -1145, 114, 810};
        Smallest(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/Smallest.java:79: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method Smallest
            if (a[index] < a[smallest]) {
                            ^
1 verification failure

